// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Paid extends EthereumEvent {
  get params(): Paid__Params {
    return new Paid__Params(this);
  }
}

export class Paid__Params {
  _event: Paid;

  constructor(event: Paid) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get eventId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymentRegistry__getPayoffResult {
  value0: i32;
  value1: Address;
  value2: BigInt;

  constructor(value0: i32, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromI32(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PaymentRegistry extends SmartContract {
  static bind(address: Address): PaymentRegistry {
    return new PaymentRegistry("PaymentRegistry", address);
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  paymentRouter(): Address {
    let result = super.call("paymentRouter", []);

    return result[0].toAddress();
  }

  try_paymentRouter(): CallResult<Address> {
    let result = super.tryCall("paymentRouter", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getPayoffBalance(assetId: Bytes, eventId: BigInt): BigInt {
    let result = super.call("getPayoffBalance", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromUnsignedBigInt(eventId)
    ]);

    return result[0].toBigInt();
  }

  try_getPayoffBalance(assetId: Bytes, eventId: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getPayoffBalance", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromUnsignedBigInt(eventId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPayoff(assetId: Bytes, eventId: BigInt): PaymentRegistry__getPayoffResult {
    let result = super.call("getPayoff", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromUnsignedBigInt(eventId)
    ]);

    return new PaymentRegistry__getPayoffResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_getPayoff(
    assetId: Bytes,
    eventId: BigInt
  ): CallResult<PaymentRegistry__getPayoffResult> {
    let result = super.tryCall("getPayoff", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromUnsignedBigInt(eventId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new PaymentRegistry__getPayoffResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetPaymentRouterCall extends EthereumCall {
  get inputs(): SetPaymentRouterCall__Inputs {
    return new SetPaymentRouterCall__Inputs(this);
  }

  get outputs(): SetPaymentRouterCall__Outputs {
    return new SetPaymentRouterCall__Outputs(this);
  }
}

export class SetPaymentRouterCall__Inputs {
  _call: SetPaymentRouterCall;

  constructor(call: SetPaymentRouterCall) {
    this._call = call;
  }

  get _paymentRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPaymentRouterCall__Outputs {
  _call: SetPaymentRouterCall;

  constructor(call: SetPaymentRouterCall) {
    this._call = call;
  }
}

export class RegisterPaymentCall extends EthereumCall {
  get inputs(): RegisterPaymentCall__Inputs {
    return new RegisterPaymentCall__Inputs(this);
  }

  get outputs(): RegisterPaymentCall__Outputs {
    return new RegisterPaymentCall__Outputs(this);
  }
}

export class RegisterPaymentCall__Inputs {
  _call: RegisterPaymentCall;

  constructor(call: RegisterPaymentCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get cashflowId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get eventId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RegisterPaymentCall__Outputs {
  _call: RegisterPaymentCall;

  constructor(call: RegisterPaymentCall) {
    this._call = call;
  }
}
