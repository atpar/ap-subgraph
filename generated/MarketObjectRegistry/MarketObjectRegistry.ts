// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PublishedDataPoint extends EthereumEvent {
  get params(): PublishedDataPoint__Params {
    return new PublishedDataPoint__Params(this);
  }
}

export class PublishedDataPoint__Params {
  _event: PublishedDataPoint;

  constructor(event: PublishedDataPoint) {
    this._event = event;
  }

  get marketObjectId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dataPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatedMarketObjectProvider extends EthereumEvent {
  get params(): UpdatedMarketObjectProvider__Params {
    return new UpdatedMarketObjectProvider__Params(this);
  }
}

export class UpdatedMarketObjectProvider__Params {
  _event: UpdatedMarketObjectProvider;

  constructor(event: UpdatedMarketObjectProvider) {
    this._event = event;
  }

  get marketObjectId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get provider(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarketObjectRegistry__getDataPointOfMarketObjectResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromSignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromBoolean(this.value1));
    return map;
  }
}

export class MarketObjectRegistry extends SmartContract {
  static bind(address: Address): MarketObjectRegistry {
    return new MarketObjectRegistry("MarketObjectRegistry", address);
  }

  ONE_POINT_ZERO(): BigInt {
    let result = super.call("ONE_POINT_ZERO", []);

    return result[0].toBigInt();
  }

  try_ONE_POINT_ZERO(): CallResult<BigInt> {
    let result = super.tryCall("ONE_POINT_ZERO", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): CallResult<BigInt> {
    let result = super.tryCall("PRECISION", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getDataPointOfMarketObject(
    marketObjectId: Bytes,
    timestamp: BigInt
  ): MarketObjectRegistry__getDataPointOfMarketObjectResult {
    let result = super.call("getDataPointOfMarketObject", [
      EthereumValue.fromFixedBytes(marketObjectId),
      EthereumValue.fromUnsignedBigInt(timestamp)
    ]);

    return new MarketObjectRegistry__getDataPointOfMarketObjectResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getDataPointOfMarketObject(
    marketObjectId: Bytes,
    timestamp: BigInt
  ): CallResult<MarketObjectRegistry__getDataPointOfMarketObjectResult> {
    let result = super.tryCall("getDataPointOfMarketObject", [
      EthereumValue.fromFixedBytes(marketObjectId),
      EthereumValue.fromUnsignedBigInt(timestamp)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new MarketObjectRegistry__getDataPointOfMarketObjectResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  getMarketObjectLastUpdatedTimestamp(marketObjectId: Bytes): BigInt {
    let result = super.call("getMarketObjectLastUpdatedTimestamp", [
      EthereumValue.fromFixedBytes(marketObjectId)
    ]);

    return result[0].toBigInt();
  }

  try_getMarketObjectLastUpdatedTimestamp(
    marketObjectId: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("getMarketObjectLastUpdatedTimestamp", [
      EthereumValue.fromFixedBytes(marketObjectId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetMarketObjectProviderCall extends EthereumCall {
  get inputs(): SetMarketObjectProviderCall__Inputs {
    return new SetMarketObjectProviderCall__Inputs(this);
  }

  get outputs(): SetMarketObjectProviderCall__Outputs {
    return new SetMarketObjectProviderCall__Outputs(this);
  }
}

export class SetMarketObjectProviderCall__Inputs {
  _call: SetMarketObjectProviderCall;

  constructor(call: SetMarketObjectProviderCall) {
    this._call = call;
  }

  get marketObjectId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get provider(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetMarketObjectProviderCall__Outputs {
  _call: SetMarketObjectProviderCall;

  constructor(call: SetMarketObjectProviderCall) {
    this._call = call;
  }
}

export class PublishDataPointOfMarketObjectCall extends EthereumCall {
  get inputs(): PublishDataPointOfMarketObjectCall__Inputs {
    return new PublishDataPointOfMarketObjectCall__Inputs(this);
  }

  get outputs(): PublishDataPointOfMarketObjectCall__Outputs {
    return new PublishDataPointOfMarketObjectCall__Outputs(this);
  }
}

export class PublishDataPointOfMarketObjectCall__Inputs {
  _call: PublishDataPointOfMarketObjectCall;

  constructor(call: PublishDataPointOfMarketObjectCall) {
    this._call = call;
  }

  get marketObjectId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dataPoint(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PublishDataPointOfMarketObjectCall__Outputs {
  _call: PublishDataPointOfMarketObjectCall;

  constructor(call: PublishDataPointOfMarketObjectCall) {
    this._call = call;
  }
}
