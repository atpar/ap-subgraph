// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class DeployedDistributor extends EthereumEvent {
  get params(): DeployedDistributor__Params {
    return new DeployedDistributor__Params(this);
  }
}

export class DeployedDistributor__Params {
  _event: DeployedDistributor;

  constructor(event: DeployedDistributor) {
    this._event = event;
  }

  get distributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenizationFactory extends SmartContract {
  static bind(address: Address): TokenizationFactory {
    return new TokenizationFactory("TokenizationFactory", address);
  }

  assetRegistry(): Address {
    let result = super.call("assetRegistry", []);

    return result[0].toAddress();
  }

  try_assetRegistry(): CallResult<Address> {
    let result = super.tryCall("assetRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _assetRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateERC20DistributorCall extends EthereumCall {
  get inputs(): CreateERC20DistributorCall__Inputs {
    return new CreateERC20DistributorCall__Inputs(this);
  }

  get outputs(): CreateERC20DistributorCall__Outputs {
    return new CreateERC20DistributorCall__Outputs(this);
  }
}

export class CreateERC20DistributorCall__Inputs {
  _call: CreateERC20DistributorCall;

  constructor(call: CreateERC20DistributorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get initialSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class CreateERC20DistributorCall__Outputs {
  _call: CreateERC20DistributorCall;

  constructor(call: CreateERC20DistributorCall) {
    this._call = call;
  }
}

export class CreateRestrictedERC20DistributorCall extends EthereumCall {
  get inputs(): CreateRestrictedERC20DistributorCall__Inputs {
    return new CreateRestrictedERC20DistributorCall__Inputs(this);
  }

  get outputs(): CreateRestrictedERC20DistributorCall__Outputs {
    return new CreateRestrictedERC20DistributorCall__Outputs(this);
  }
}

export class CreateRestrictedERC20DistributorCall__Inputs {
  _call: CreateRestrictedERC20DistributorCall;

  constructor(call: CreateRestrictedERC20DistributorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get initialSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class CreateRestrictedERC20DistributorCall__Outputs {
  _call: CreateRestrictedERC20DistributorCall;

  constructor(call: CreateRestrictedERC20DistributorCall) {
    this._call = call;
  }
}
