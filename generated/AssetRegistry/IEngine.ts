// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class IEngine__computeInitialStateResultValue0Struct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get executionDate(): BigInt {
    return this[4].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[5].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[6].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[7].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[8].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[9].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[11].toBigInt();
  }

  get executionAmount(): BigInt {
    return this[12].toBigInt();
  }
}

export class IEngine__computeInitialStateInputTermsStruct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDate(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): IEngine__computeInitialStateInputTermsGracePeriodStruct {
    return this[31].toTuple() as IEngine__computeInitialStateInputTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): IEngine__computeInitialStateInputTermsDelinquencyPeriodStruct {
    return this[32].toTuple() as IEngine__computeInitialStateInputTermsDelinquencyPeriodStruct;
  }

  get contractReference_1(): IEngine__computeInitialStateInputTermsContractReference_1Struct {
    return this[33].toTuple() as IEngine__computeInitialStateInputTermsContractReference_1Struct;
  }

  get contractReference_2(): IEngine__computeInitialStateInputTermsContractReference_2Struct {
    return this[34].toTuple() as IEngine__computeInitialStateInputTermsContractReference_2Struct;
  }
}

export class IEngine__computeInitialStateInputTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__computeInitialStateInputTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__computeInitialStateInputTermsContractReference_1Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get contractReferenceType(): i32 {
    return this[1].toI32();
  }

  get contractReferenceRole(): i32 {
    return this[2].toI32();
  }
}

export class IEngine__computeInitialStateInputTermsContractReference_2Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get contractReferenceType(): i32 {
    return this[1].toI32();
  }

  get contractReferenceRole(): i32 {
    return this[2].toI32();
  }
}

export class IEngine__computeStateForEventResultValue0Struct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get executionDate(): BigInt {
    return this[4].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[5].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[6].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[7].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[8].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[9].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[11].toBigInt();
  }

  get executionAmount(): BigInt {
    return this[12].toBigInt();
  }
}

export class IEngine__computeStateForEventInputTermsStruct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDate(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): IEngine__computeStateForEventInputTermsGracePeriodStruct {
    return this[31].toTuple() as IEngine__computeStateForEventInputTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): IEngine__computeStateForEventInputTermsDelinquencyPeriodStruct {
    return this[32].toTuple() as IEngine__computeStateForEventInputTermsDelinquencyPeriodStruct;
  }

  get contractReference_1(): IEngine__computeStateForEventInputTermsContractReference_1Struct {
    return this[33].toTuple() as IEngine__computeStateForEventInputTermsContractReference_1Struct;
  }

  get contractReference_2(): IEngine__computeStateForEventInputTermsContractReference_2Struct {
    return this[34].toTuple() as IEngine__computeStateForEventInputTermsContractReference_2Struct;
  }
}

export class IEngine__computeStateForEventInputTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__computeStateForEventInputTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__computeStateForEventInputTermsContractReference_1Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get contractReferenceType(): i32 {
    return this[1].toI32();
  }

  get contractReferenceRole(): i32 {
    return this[2].toI32();
  }
}

export class IEngine__computeStateForEventInputTermsContractReference_2Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get contractReferenceType(): i32 {
    return this[1].toI32();
  }

  get contractReferenceRole(): i32 {
    return this[2].toI32();
  }
}

export class IEngine__computeStateForEventInputStateStruct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get executionDate(): BigInt {
    return this[4].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[5].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[6].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[7].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[8].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[9].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[11].toBigInt();
  }

  get executionAmount(): BigInt {
    return this[12].toBigInt();
  }
}

export class IEngine__computePayoffForEventInputTermsStruct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDate(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): IEngine__computePayoffForEventInputTermsGracePeriodStruct {
    return this[31].toTuple() as IEngine__computePayoffForEventInputTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): IEngine__computePayoffForEventInputTermsDelinquencyPeriodStruct {
    return this[32].toTuple() as IEngine__computePayoffForEventInputTermsDelinquencyPeriodStruct;
  }

  get contractReference_1(): IEngine__computePayoffForEventInputTermsContractReference_1Struct {
    return this[33].toTuple() as IEngine__computePayoffForEventInputTermsContractReference_1Struct;
  }

  get contractReference_2(): IEngine__computePayoffForEventInputTermsContractReference_2Struct {
    return this[34].toTuple() as IEngine__computePayoffForEventInputTermsContractReference_2Struct;
  }
}

export class IEngine__computePayoffForEventInputTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__computePayoffForEventInputTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__computePayoffForEventInputTermsContractReference_1Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get contractReferenceType(): i32 {
    return this[1].toI32();
  }

  get contractReferenceRole(): i32 {
    return this[2].toI32();
  }
}

export class IEngine__computePayoffForEventInputTermsContractReference_2Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get contractReferenceType(): i32 {
    return this[1].toI32();
  }

  get contractReferenceRole(): i32 {
    return this[2].toI32();
  }
}

export class IEngine__computePayoffForEventInputStateStruct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get executionDate(): BigInt {
    return this[4].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[5].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[6].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[7].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[8].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[9].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[11].toBigInt();
  }

  get executionAmount(): BigInt {
    return this[12].toBigInt();
  }
}

export class IEngine__computeNonCyclicScheduleSegmentInputTermsStruct extends EthereumTuple {
  get scalingEffect(): i32 {
    return this[0].toI32();
  }

  get contractDealDate(): BigInt {
    return this[1].toBigInt();
  }

  get statusDate(): BigInt {
    return this[2].toBigInt();
  }

  get initialExchangeDate(): BigInt {
    return this[3].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get purchaseDate(): BigInt {
    return this[6].toBigInt();
  }

  get capitalizationEndDate(): BigInt {
    return this[7].toBigInt();
  }

  get cycleAnchorDateOfInterestPayment(): BigInt {
    return this[8].toBigInt();
  }

  get cycleAnchorDateOfRateReset(): BigInt {
    return this[9].toBigInt();
  }

  get cycleAnchorDateOfScalingIndex(): BigInt {
    return this[10].toBigInt();
  }

  get cycleAnchorDateOfFee(): BigInt {
    return this[11].toBigInt();
  }

  get cycleAnchorDateOfPrincipalRedemption(): BigInt {
    return this[12].toBigInt();
  }

  get cycleOfInterestPayment(): IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfInterestPaymentStruct {
    return this[13].toTuple() as IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfInterestPaymentStruct;
  }

  get cycleOfRateReset(): IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfRateResetStruct {
    return this[14].toTuple() as IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfRateResetStruct;
  }

  get cycleOfScalingIndex(): IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfScalingIndexStruct {
    return this[15].toTuple() as IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfScalingIndexStruct;
  }

  get cycleOfFee(): IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfFeeStruct {
    return this[16].toTuple() as IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfFeeStruct;
  }

  get cycleOfPrincipalRedemption(): IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfPrincipalRedemptionStruct {
    return this[17].toTuple() as IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfPrincipalRedemptionStruct;
  }

  get gracePeriod(): IEngine__computeNonCyclicScheduleSegmentInputTermsGracePeriodStruct {
    return this[18].toTuple() as IEngine__computeNonCyclicScheduleSegmentInputTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): IEngine__computeNonCyclicScheduleSegmentInputTermsDelinquencyPeriodStruct {
    return this[19].toTuple() as IEngine__computeNonCyclicScheduleSegmentInputTermsDelinquencyPeriodStruct;
  }
}

export class IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfInterestPaymentStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfRateResetStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfScalingIndexStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfFeeStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class IEngine__computeNonCyclicScheduleSegmentInputTermsCycleOfPrincipalRedemptionStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class IEngine__computeNonCyclicScheduleSegmentInputTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__computeNonCyclicScheduleSegmentInputTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__computeCyclicScheduleSegmentInputTermsStruct extends EthereumTuple {
  get scalingEffect(): i32 {
    return this[0].toI32();
  }

  get contractDealDate(): BigInt {
    return this[1].toBigInt();
  }

  get statusDate(): BigInt {
    return this[2].toBigInt();
  }

  get initialExchangeDate(): BigInt {
    return this[3].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get purchaseDate(): BigInt {
    return this[6].toBigInt();
  }

  get capitalizationEndDate(): BigInt {
    return this[7].toBigInt();
  }

  get cycleAnchorDateOfInterestPayment(): BigInt {
    return this[8].toBigInt();
  }

  get cycleAnchorDateOfRateReset(): BigInt {
    return this[9].toBigInt();
  }

  get cycleAnchorDateOfScalingIndex(): BigInt {
    return this[10].toBigInt();
  }

  get cycleAnchorDateOfFee(): BigInt {
    return this[11].toBigInt();
  }

  get cycleAnchorDateOfPrincipalRedemption(): BigInt {
    return this[12].toBigInt();
  }

  get cycleOfInterestPayment(): IEngine__computeCyclicScheduleSegmentInputTermsCycleOfInterestPaymentStruct {
    return this[13].toTuple() as IEngine__computeCyclicScheduleSegmentInputTermsCycleOfInterestPaymentStruct;
  }

  get cycleOfRateReset(): IEngine__computeCyclicScheduleSegmentInputTermsCycleOfRateResetStruct {
    return this[14].toTuple() as IEngine__computeCyclicScheduleSegmentInputTermsCycleOfRateResetStruct;
  }

  get cycleOfScalingIndex(): IEngine__computeCyclicScheduleSegmentInputTermsCycleOfScalingIndexStruct {
    return this[15].toTuple() as IEngine__computeCyclicScheduleSegmentInputTermsCycleOfScalingIndexStruct;
  }

  get cycleOfFee(): IEngine__computeCyclicScheduleSegmentInputTermsCycleOfFeeStruct {
    return this[16].toTuple() as IEngine__computeCyclicScheduleSegmentInputTermsCycleOfFeeStruct;
  }

  get cycleOfPrincipalRedemption(): IEngine__computeCyclicScheduleSegmentInputTermsCycleOfPrincipalRedemptionStruct {
    return this[17].toTuple() as IEngine__computeCyclicScheduleSegmentInputTermsCycleOfPrincipalRedemptionStruct;
  }

  get gracePeriod(): IEngine__computeCyclicScheduleSegmentInputTermsGracePeriodStruct {
    return this[18].toTuple() as IEngine__computeCyclicScheduleSegmentInputTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): IEngine__computeCyclicScheduleSegmentInputTermsDelinquencyPeriodStruct {
    return this[19].toTuple() as IEngine__computeCyclicScheduleSegmentInputTermsDelinquencyPeriodStruct;
  }
}

export class IEngine__computeCyclicScheduleSegmentInputTermsCycleOfInterestPaymentStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class IEngine__computeCyclicScheduleSegmentInputTermsCycleOfRateResetStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class IEngine__computeCyclicScheduleSegmentInputTermsCycleOfScalingIndexStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class IEngine__computeCyclicScheduleSegmentInputTermsCycleOfFeeStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class IEngine__computeCyclicScheduleSegmentInputTermsCycleOfPrincipalRedemptionStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class IEngine__computeCyclicScheduleSegmentInputTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__computeCyclicScheduleSegmentInputTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__isEventScheduledInputTermsStruct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDate(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): IEngine__isEventScheduledInputTermsGracePeriodStruct {
    return this[31].toTuple() as IEngine__isEventScheduledInputTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): IEngine__isEventScheduledInputTermsDelinquencyPeriodStruct {
    return this[32].toTuple() as IEngine__isEventScheduledInputTermsDelinquencyPeriodStruct;
  }

  get contractReference_1(): IEngine__isEventScheduledInputTermsContractReference_1Struct {
    return this[33].toTuple() as IEngine__isEventScheduledInputTermsContractReference_1Struct;
  }

  get contractReference_2(): IEngine__isEventScheduledInputTermsContractReference_2Struct {
    return this[34].toTuple() as IEngine__isEventScheduledInputTermsContractReference_2Struct;
  }
}

export class IEngine__isEventScheduledInputTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__isEventScheduledInputTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class IEngine__isEventScheduledInputTermsContractReference_1Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get contractReferenceType(): i32 {
    return this[1].toI32();
  }

  get contractReferenceRole(): i32 {
    return this[2].toI32();
  }
}

export class IEngine__isEventScheduledInputTermsContractReference_2Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get contractReferenceType(): i32 {
    return this[1].toI32();
  }

  get contractReferenceRole(): i32 {
    return this[2].toI32();
  }
}

export class IEngine__isEventScheduledInputStateStruct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get executionDate(): BigInt {
    return this[4].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[5].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[6].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[7].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[8].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[9].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[11].toBigInt();
  }

  get executionAmount(): BigInt {
    return this[12].toBigInt();
  }
}

export class IEngine__isEventScheduledInputUnderlyingStateStruct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get executionDate(): BigInt {
    return this[4].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[5].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[6].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[7].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[8].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[9].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[11].toBigInt();
  }

  get executionAmount(): BigInt {
    return this[12].toBigInt();
  }
}

export class IEngine extends SmartContract {
  static bind(address: Address): IEngine {
    return new IEngine("IEngine", address);
  }

  ONE_POINT_ZERO(): BigInt {
    let result = super.call("ONE_POINT_ZERO", []);

    return result[0].toBigInt();
  }

  try_ONE_POINT_ZERO(): CallResult<BigInt> {
    let result = super.tryCall("ONE_POINT_ZERO", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): CallResult<BigInt> {
    let result = super.tryCall("PRECISION", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  computeInitialState(
    terms: IEngine__computeInitialStateInputTermsStruct
  ): IEngine__computeInitialStateResultValue0Struct {
    let result = super.call("computeInitialState", [
      EthereumValue.fromTuple(terms)
    ]);

    return result[0].toTuple() as IEngine__computeInitialStateResultValue0Struct;
  }

  try_computeInitialState(
    terms: IEngine__computeInitialStateInputTermsStruct
  ): CallResult<IEngine__computeInitialStateResultValue0Struct> {
    let result = super.tryCall("computeInitialState", [
      EthereumValue.fromTuple(terms)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as IEngine__computeInitialStateResultValue0Struct
    );
  }

  computeStateForEvent(
    terms: IEngine__computeStateForEventInputTermsStruct,
    state: IEngine__computeStateForEventInputStateStruct,
    _event: Bytes,
    externalData: Bytes
  ): IEngine__computeStateForEventResultValue0Struct {
    let result = super.call("computeStateForEvent", [
      EthereumValue.fromTuple(terms),
      EthereumValue.fromTuple(state),
      EthereumValue.fromFixedBytes(_event),
      EthereumValue.fromFixedBytes(externalData)
    ]);

    return result[0].toTuple() as IEngine__computeStateForEventResultValue0Struct;
  }

  try_computeStateForEvent(
    terms: IEngine__computeStateForEventInputTermsStruct,
    state: IEngine__computeStateForEventInputStateStruct,
    _event: Bytes,
    externalData: Bytes
  ): CallResult<IEngine__computeStateForEventResultValue0Struct> {
    let result = super.tryCall("computeStateForEvent", [
      EthereumValue.fromTuple(terms),
      EthereumValue.fromTuple(state),
      EthereumValue.fromFixedBytes(_event),
      EthereumValue.fromFixedBytes(externalData)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as IEngine__computeStateForEventResultValue0Struct
    );
  }

  computePayoffForEvent(
    terms: IEngine__computePayoffForEventInputTermsStruct,
    state: IEngine__computePayoffForEventInputStateStruct,
    _event: Bytes,
    externalData: Bytes
  ): BigInt {
    let result = super.call("computePayoffForEvent", [
      EthereumValue.fromTuple(terms),
      EthereumValue.fromTuple(state),
      EthereumValue.fromFixedBytes(_event),
      EthereumValue.fromFixedBytes(externalData)
    ]);

    return result[0].toBigInt();
  }

  try_computePayoffForEvent(
    terms: IEngine__computePayoffForEventInputTermsStruct,
    state: IEngine__computePayoffForEventInputStateStruct,
    _event: Bytes,
    externalData: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("computePayoffForEvent", [
      EthereumValue.fromTuple(terms),
      EthereumValue.fromTuple(state),
      EthereumValue.fromFixedBytes(_event),
      EthereumValue.fromFixedBytes(externalData)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  computeNonCyclicScheduleSegment(
    terms: IEngine__computeNonCyclicScheduleSegmentInputTermsStruct,
    segmentStart: BigInt,
    segmentEnd: BigInt
  ): Array<Bytes> {
    let result = super.call("computeNonCyclicScheduleSegment", [
      EthereumValue.fromTuple(terms),
      EthereumValue.fromUnsignedBigInt(segmentStart),
      EthereumValue.fromUnsignedBigInt(segmentEnd)
    ]);

    return result[0].toBytesArray();
  }

  try_computeNonCyclicScheduleSegment(
    terms: IEngine__computeNonCyclicScheduleSegmentInputTermsStruct,
    segmentStart: BigInt,
    segmentEnd: BigInt
  ): CallResult<Array<Bytes>> {
    let result = super.tryCall("computeNonCyclicScheduleSegment", [
      EthereumValue.fromTuple(terms),
      EthereumValue.fromUnsignedBigInt(segmentStart),
      EthereumValue.fromUnsignedBigInt(segmentEnd)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytesArray());
  }

  computeCyclicScheduleSegment(
    terms: IEngine__computeCyclicScheduleSegmentInputTermsStruct,
    segmentStart: BigInt,
    segmentEnd: BigInt,
    eventType: i32
  ): Array<Bytes> {
    let result = super.call("computeCyclicScheduleSegment", [
      EthereumValue.fromTuple(terms),
      EthereumValue.fromUnsignedBigInt(segmentStart),
      EthereumValue.fromUnsignedBigInt(segmentEnd),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType))
    ]);

    return result[0].toBytesArray();
  }

  try_computeCyclicScheduleSegment(
    terms: IEngine__computeCyclicScheduleSegmentInputTermsStruct,
    segmentStart: BigInt,
    segmentEnd: BigInt,
    eventType: i32
  ): CallResult<Array<Bytes>> {
    let result = super.tryCall("computeCyclicScheduleSegment", [
      EthereumValue.fromTuple(terms),
      EthereumValue.fromUnsignedBigInt(segmentStart),
      EthereumValue.fromUnsignedBigInt(segmentEnd),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytesArray());
  }

  isEventScheduled(
    _event: Bytes,
    terms: IEngine__isEventScheduledInputTermsStruct,
    state: IEngine__isEventScheduledInputStateStruct,
    hasUnderlying: boolean,
    underlyingState: IEngine__isEventScheduledInputUnderlyingStateStruct
  ): boolean {
    let result = super.call("isEventScheduled", [
      EthereumValue.fromFixedBytes(_event),
      EthereumValue.fromTuple(terms),
      EthereumValue.fromTuple(state),
      EthereumValue.fromBoolean(hasUnderlying),
      EthereumValue.fromTuple(underlyingState)
    ]);

    return result[0].toBoolean();
  }

  try_isEventScheduled(
    _event: Bytes,
    terms: IEngine__isEventScheduledInputTermsStruct,
    state: IEngine__isEventScheduledInputStateStruct,
    hasUnderlying: boolean,
    underlyingState: IEngine__isEventScheduledInputUnderlyingStateStruct
  ): CallResult<boolean> {
    let result = super.tryCall("isEventScheduled", [
      EthereumValue.fromFixedBytes(_event),
      EthereumValue.fromTuple(terms),
      EthereumValue.fromTuple(state),
      EthereumValue.fromBoolean(hasUnderlying),
      EthereumValue.fromTuple(underlyingState)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}
