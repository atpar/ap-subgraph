// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class RegisteredTemplate extends EthereumEvent {
  get params(): RegisteredTemplate__Params {
    return new RegisteredTemplate__Params(this);
  }
}

export class RegisteredTemplate__Params {
  _event: RegisteredTemplate;

  constructor(event: RegisteredTemplate) {
    this._event = event;
  }

  get templateId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class TemplateRegistry__getTemplateTermsResultValue0Struct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDateOffset(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDateOffset(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): TemplateRegistry__getTemplateTermsResultValue0GracePeriodStruct {
    return this[31].toTuple() as TemplateRegistry__getTemplateTermsResultValue0GracePeriodStruct;
  }

  get delinquencyPeriod(): TemplateRegistry__getTemplateTermsResultValue0DelinquencyPeriodStruct {
    return this[32].toTuple() as TemplateRegistry__getTemplateTermsResultValue0DelinquencyPeriodStruct;
  }
}

export class TemplateRegistry__getTemplateTermsResultValue0GracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class TemplateRegistry__getTemplateTermsResultValue0DelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class TemplateRegistry extends SmartContract {
  static bind(address: Address): TemplateRegistry {
    return new TemplateRegistry("TemplateRegistry", address);
  }

  ONE_POINT_ZERO(): BigInt {
    let result = super.call("ONE_POINT_ZERO", []);

    return result[0].toBigInt();
  }

  try_ONE_POINT_ZERO(): CallResult<BigInt> {
    let result = super.tryCall("ONE_POINT_ZERO", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): CallResult<BigInt> {
    let result = super.tryCall("PRECISION", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTemplateTerms(
    templateId: Bytes
  ): TemplateRegistry__getTemplateTermsResultValue0Struct {
    let result = super.call("getTemplateTerms", [
      EthereumValue.fromFixedBytes(templateId)
    ]);

    return result[0].toTuple() as TemplateRegistry__getTemplateTermsResultValue0Struct;
  }

  try_getTemplateTerms(
    templateId: Bytes
  ): CallResult<TemplateRegistry__getTemplateTermsResultValue0Struct> {
    let result = super.tryCall("getTemplateTerms", [
      EthereumValue.fromFixedBytes(templateId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as TemplateRegistry__getTemplateTermsResultValue0Struct
    );
  }

  getEventAtIndex(templateId: Bytes, index: BigInt): Bytes {
    let result = super.call("getEventAtIndex", [
      EthereumValue.fromFixedBytes(templateId),
      EthereumValue.fromUnsignedBigInt(index)
    ]);

    return result[0].toBytes();
  }

  try_getEventAtIndex(templateId: Bytes, index: BigInt): CallResult<Bytes> {
    let result = super.tryCall("getEventAtIndex", [
      EthereumValue.fromFixedBytes(templateId),
      EthereumValue.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getScheduleLength(templateId: Bytes): BigInt {
    let result = super.call("getScheduleLength", [
      EthereumValue.fromFixedBytes(templateId)
    ]);

    return result[0].toBigInt();
  }

  try_getScheduleLength(templateId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getScheduleLength", [
      EthereumValue.fromFixedBytes(templateId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getSchedule(templateId: Bytes): Array<Bytes> {
    let result = super.call("getSchedule", [
      EthereumValue.fromFixedBytes(templateId)
    ]);

    return result[0].toBytesArray();
  }

  try_getSchedule(templateId: Bytes): CallResult<Array<Bytes>> {
    let result = super.tryCall("getSchedule", [
      EthereumValue.fromFixedBytes(templateId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytesArray());
  }
}

export class RegisterTemplateCall extends EthereumCall {
  get inputs(): RegisterTemplateCall__Inputs {
    return new RegisterTemplateCall__Inputs(this);
  }

  get outputs(): RegisterTemplateCall__Outputs {
    return new RegisterTemplateCall__Outputs(this);
  }
}

export class RegisterTemplateCall__Inputs {
  _call: RegisterTemplateCall;

  constructor(call: RegisterTemplateCall) {
    this._call = call;
  }

  get terms(): RegisterTemplateCallTermsStruct {
    return this._call.inputValues[0].value.toTuple() as RegisterTemplateCallTermsStruct;
  }

  get templateSchedule(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class RegisterTemplateCall__Outputs {
  _call: RegisterTemplateCall;

  constructor(call: RegisterTemplateCall) {
    this._call = call;
  }
}

export class RegisterTemplateCallTermsStruct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDateOffset(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDateOffset(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): RegisterTemplateCallTermsGracePeriodStruct {
    return this[31].toTuple() as RegisterTemplateCallTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): RegisterTemplateCallTermsDelinquencyPeriodStruct {
    return this[32].toTuple() as RegisterTemplateCallTermsDelinquencyPeriodStruct;
  }
}

export class RegisterTemplateCallTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class RegisterTemplateCallTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}
