// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class GrantedAccess extends EthereumEvent {
  get params(): GrantedAccess__Params {
    return new GrantedAccess__Params(this);
  }
}

export class GrantedAccess__Params {
  _event: GrantedAccess;

  constructor(event: GrantedAccess) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get methodSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RegisteredAsset extends EthereumEvent {
  get params(): RegisteredAsset__Params {
    return new RegisteredAsset__Params(this);
  }
}

export class RegisteredAsset__Params {
  _event: RegisteredAsset;

  constructor(event: RegisteredAsset) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RevokedAccess extends EthereumEvent {
  get params(): RevokedAccess__Params {
    return new RevokedAccess__Params(this);
  }
}

export class RevokedAccess__Params {
  _event: RevokedAccess;

  constructor(event: RevokedAccess) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get methodSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class UpdatedActor extends EthereumEvent {
  get params(): UpdatedActor__Params {
    return new UpdatedActor__Params(this);
  }
}

export class UpdatedActor__Params {
  _event: UpdatedActor;

  constructor(event: UpdatedActor) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get prevActor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newActor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpdatedBeneficiary extends EthereumEvent {
  get params(): UpdatedBeneficiary__Params {
    return new UpdatedBeneficiary__Params(this);
  }
}

export class UpdatedBeneficiary__Params {
  _event: UpdatedBeneficiary;

  constructor(event: UpdatedBeneficiary) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get prevBeneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newBeneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpdatedEngine extends EthereumEvent {
  get params(): UpdatedEngine__Params {
    return new UpdatedEngine__Params(this);
  }
}

export class UpdatedEngine__Params {
  _event: UpdatedEngine;

  constructor(event: UpdatedEngine) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get prevEngine(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newEngine(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpdatedFinalizedState extends EthereumEvent {
  get params(): UpdatedFinalizedState__Params {
    return new UpdatedFinalizedState__Params(this);
  }
}

export class UpdatedFinalizedState__Params {
  _event: UpdatedFinalizedState;

  constructor(event: UpdatedFinalizedState) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get statusDate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatedObligor extends EthereumEvent {
  get params(): UpdatedObligor__Params {
    return new UpdatedObligor__Params(this);
  }
}

export class UpdatedObligor__Params {
  _event: UpdatedObligor;

  constructor(event: UpdatedObligor) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get prevObligor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newObligor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpdatedState extends EthereumEvent {
  get params(): UpdatedState__Params {
    return new UpdatedState__Params(this);
  }
}

export class UpdatedState__Params {
  _event: UpdatedState;

  constructor(event: UpdatedState) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get statusDate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatedTerms extends EthereumEvent {
  get params(): UpdatedTerms__Params {
    return new UpdatedTerms__Params(this);
  }
}

export class UpdatedTerms__Params {
  _event: UpdatedTerms;

  constructor(event: UpdatedTerms) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ANNRegistry__decodeEventResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set(
      "value0",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ANNRegistry__getFinalizedStateResultValue0Struct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get exerciseDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get lastCouponDay(): BigInt {
    return this[6].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[7].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[8].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[9].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[10].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[11].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[12].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[13].toBigInt();
  }

  get exerciseAmount(): BigInt {
    return this[14].toBigInt();
  }

  get exerciseQuantity(): BigInt {
    return this[15].toBigInt();
  }

  get quantity(): BigInt {
    return this[16].toBigInt();
  }

  get couponAmountFixed(): BigInt {
    return this[17].toBigInt();
  }

  get marginFactor(): BigInt {
    return this[18].toBigInt();
  }

  get adjustmentFactor(): BigInt {
    return this[19].toBigInt();
  }
}

export class ANNRegistry__getOwnershipResultValue0Struct extends EthereumTuple {
  get creatorObligor(): Address {
    return this[0].toAddress();
  }

  get creatorBeneficiary(): Address {
    return this[1].toAddress();
  }

  get counterpartyObligor(): Address {
    return this[2].toAddress();
  }

  get counterpartyBeneficiary(): Address {
    return this[3].toAddress();
  }
}

export class ANNRegistry__getStateResultValue0Struct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get exerciseDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get lastCouponDay(): BigInt {
    return this[6].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[7].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[8].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[9].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[10].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[11].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[12].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[13].toBigInt();
  }

  get exerciseAmount(): BigInt {
    return this[14].toBigInt();
  }

  get exerciseQuantity(): BigInt {
    return this[15].toBigInt();
  }

  get quantity(): BigInt {
    return this[16].toBigInt();
  }

  get couponAmountFixed(): BigInt {
    return this[17].toBigInt();
  }

  get marginFactor(): BigInt {
    return this[18].toBigInt();
  }

  get adjustmentFactor(): BigInt {
    return this[19].toBigInt();
  }
}

export class ANNRegistry__isEventSettledResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromBoolean(this.value0));
    map.set("value1", EthereumValue.fromSignedBigInt(this.value1));
    return map;
  }
}

export class ANNRegistry__getTermsResultValue0Struct extends EthereumTuple {
  get contractType(): i32 {
    return this[0].toI32();
  }

  get calendar(): i32 {
    return this[1].toI32();
  }

  get contractRole(): i32 {
    return this[2].toI32();
  }

  get dayCountConvention(): i32 {
    return this[3].toI32();
  }

  get businessDayConvention(): i32 {
    return this[4].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[5].toI32();
  }

  get scalingEffect(): i32 {
    return this[6].toI32();
  }

  get penaltyType(): i32 {
    return this[7].toI32();
  }

  get feeBasis(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get contractDealDate(): BigInt {
    return this[12].toBigInt();
  }

  get statusDate(): BigInt {
    return this[13].toBigInt();
  }

  get initialExchangeDate(): BigInt {
    return this[14].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[15].toBigInt();
  }

  get purchaseDate(): BigInt {
    return this[16].toBigInt();
  }

  get capitalizationEndDate(): BigInt {
    return this[17].toBigInt();
  }

  get cycleAnchorDateOfInterestPayment(): BigInt {
    return this[18].toBigInt();
  }

  get cycleAnchorDateOfRateReset(): BigInt {
    return this[19].toBigInt();
  }

  get cycleAnchorDateOfScalingIndex(): BigInt {
    return this[20].toBigInt();
  }

  get cycleAnchorDateOfFee(): BigInt {
    return this[21].toBigInt();
  }

  get cycleAnchorDateOfPrincipalRedemption(): BigInt {
    return this[22].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[23].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[24].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[25].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[26].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[27].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[28].toBigInt();
  }

  get feeRate(): BigInt {
    return this[29].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[30].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[31].toBigInt();
  }

  get delinquencyRate(): BigInt {
    return this[32].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[33].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[34].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[35].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[36].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[37].toBigInt();
  }

  get periodCap(): BigInt {
    return this[38].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[39].toBigInt();
  }

  get gracePeriod(): ANNRegistry__getTermsResultValue0GracePeriodStruct {
    return this[40].toTuple() as ANNRegistry__getTermsResultValue0GracePeriodStruct;
  }

  get delinquencyPeriod(): ANNRegistry__getTermsResultValue0DelinquencyPeriodStruct {
    return this[41].toTuple() as ANNRegistry__getTermsResultValue0DelinquencyPeriodStruct;
  }

  get cycleOfInterestPayment(): ANNRegistry__getTermsResultValue0CycleOfInterestPaymentStruct {
    return this[42].toTuple() as ANNRegistry__getTermsResultValue0CycleOfInterestPaymentStruct;
  }

  get cycleOfRateReset(): ANNRegistry__getTermsResultValue0CycleOfRateResetStruct {
    return this[43].toTuple() as ANNRegistry__getTermsResultValue0CycleOfRateResetStruct;
  }

  get cycleOfScalingIndex(): ANNRegistry__getTermsResultValue0CycleOfScalingIndexStruct {
    return this[44].toTuple() as ANNRegistry__getTermsResultValue0CycleOfScalingIndexStruct;
  }

  get cycleOfFee(): ANNRegistry__getTermsResultValue0CycleOfFeeStruct {
    return this[45].toTuple() as ANNRegistry__getTermsResultValue0CycleOfFeeStruct;
  }

  get cycleOfPrincipalRedemption(): ANNRegistry__getTermsResultValue0CycleOfPrincipalRedemptionStruct {
    return this[46].toTuple() as ANNRegistry__getTermsResultValue0CycleOfPrincipalRedemptionStruct;
  }
}

export class ANNRegistry__getTermsResultValue0GracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class ANNRegistry__getTermsResultValue0DelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class ANNRegistry__getTermsResultValue0CycleOfInterestPaymentStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class ANNRegistry__getTermsResultValue0CycleOfRateResetStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class ANNRegistry__getTermsResultValue0CycleOfScalingIndexStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class ANNRegistry__getTermsResultValue0CycleOfFeeStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class ANNRegistry__getTermsResultValue0CycleOfPrincipalRedemptionStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class ANNRegistry__getPeriodValueForTermsAttributeResultValue0Struct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class ANNRegistry__getCycleValueForTermsAttributeResultValue0Struct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class ANNRegistry__getContractReferenceValueForTermsAttributeResultValue0Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get object2(): Bytes {
    return this[1].toBytes();
  }

  get _type(): i32 {
    return this[2].toI32();
  }

  get role(): i32 {
    return this[3].toI32();
  }
}

export class ANNRegistry extends SmartContract {
  static bind(address: Address): ANNRegistry {
    return new ANNRegistry("ANNRegistry", address);
  }

  decodeEvent(_event: Bytes): ANNRegistry__decodeEventResult {
    let result = super.call("decodeEvent", [
      EthereumValue.fromFixedBytes(_event)
    ]);

    return new ANNRegistry__decodeEventResult(
      result[0].toI32(),
      result[1].toBigInt()
    );
  }

  try_decodeEvent(_event: Bytes): CallResult<ANNRegistry__decodeEventResult> {
    let result = super.tryCall("decodeEvent", [
      EthereumValue.fromFixedBytes(_event)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ANNRegistry__decodeEventResult(value[0].toI32(), value[1].toBigInt())
    );
  }

  encodeEvent(eventType: i32, scheduleTime: BigInt): Bytes {
    let result = super.call("encodeEvent", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType)),
      EthereumValue.fromUnsignedBigInt(scheduleTime)
    ]);

    return result[0].toBytes();
  }

  try_encodeEvent(eventType: i32, scheduleTime: BigInt): CallResult<Bytes> {
    let result = super.tryCall("encodeEvent", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType)),
      EthereumValue.fromUnsignedBigInt(scheduleTime)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getActor(assetId: Bytes): Address {
    let result = super.call("getActor", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toAddress();
  }

  try_getActor(assetId: Bytes): CallResult<Address> {
    let result = super.tryCall("getActor", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getEngine(assetId: Bytes): Address {
    let result = super.call("getEngine", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toAddress();
  }

  try_getEngine(assetId: Bytes): CallResult<Address> {
    let result = super.tryCall("getEngine", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getEnumValueForStateAttribute(assetId: Bytes, attribute: Bytes): i32 {
    let result = super.call("getEnumValueForStateAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toI32();
  }

  try_getEnumValueForStateAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<i32> {
    let result = super.tryCall("getEnumValueForStateAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getEpochOffset(eventType: i32): BigInt {
    let result = super.call("getEpochOffset", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType))
    ]);

    return result[0].toBigInt();
  }

  try_getEpochOffset(eventType: i32): CallResult<BigInt> {
    let result = super.tryCall("getEpochOffset", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getEventAtIndex(assetId: Bytes, index: BigInt): Bytes {
    let result = super.call("getEventAtIndex", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromUnsignedBigInt(index)
    ]);

    return result[0].toBytes();
  }

  try_getEventAtIndex(assetId: Bytes, index: BigInt): CallResult<Bytes> {
    let result = super.tryCall("getEventAtIndex", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getFinalizedState(
    assetId: Bytes
  ): ANNRegistry__getFinalizedStateResultValue0Struct {
    let result = super.call("getFinalizedState", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toTuple() as ANNRegistry__getFinalizedStateResultValue0Struct;
  }

  try_getFinalizedState(
    assetId: Bytes
  ): CallResult<ANNRegistry__getFinalizedStateResultValue0Struct> {
    let result = super.tryCall("getFinalizedState", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as ANNRegistry__getFinalizedStateResultValue0Struct
    );
  }

  getIntValueForStateAttribute(assetId: Bytes, attribute: Bytes): BigInt {
    let result = super.call("getIntValueForStateAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toBigInt();
  }

  try_getIntValueForStateAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("getIntValueForStateAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getNextScheduleIndex(assetId: Bytes): BigInt {
    let result = super.call("getNextScheduleIndex", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBigInt();
  }

  try_getNextScheduleIndex(assetId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getNextScheduleIndex", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getNextScheduledEvent(assetId: Bytes): Bytes {
    let result = super.call("getNextScheduledEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_getNextScheduledEvent(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getNextScheduledEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getNextUnderlyingEvent(assetId: Bytes): Bytes {
    let result = super.call("getNextUnderlyingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_getNextUnderlyingEvent(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getNextUnderlyingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getOwnership(assetId: Bytes): ANNRegistry__getOwnershipResultValue0Struct {
    let result = super.call("getOwnership", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toTuple() as ANNRegistry__getOwnershipResultValue0Struct;
  }

  try_getOwnership(
    assetId: Bytes
  ): CallResult<ANNRegistry__getOwnershipResultValue0Struct> {
    let result = super.tryCall("getOwnership", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as ANNRegistry__getOwnershipResultValue0Struct
    );
  }

  getPendingEvent(assetId: Bytes): Bytes {
    let result = super.call("getPendingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_getPendingEvent(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getPendingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getSchedule(assetId: Bytes): Array<Bytes> {
    let result = super.call("getSchedule", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytesArray();
  }

  try_getSchedule(assetId: Bytes): CallResult<Array<Bytes>> {
    let result = super.tryCall("getSchedule", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytesArray());
  }

  getScheduleLength(assetId: Bytes): BigInt {
    let result = super.call("getScheduleLength", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBigInt();
  }

  try_getScheduleLength(assetId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getScheduleLength", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getState(assetId: Bytes): ANNRegistry__getStateResultValue0Struct {
    let result = super.call("getState", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toTuple() as ANNRegistry__getStateResultValue0Struct;
  }

  try_getState(
    assetId: Bytes
  ): CallResult<ANNRegistry__getStateResultValue0Struct> {
    let result = super.tryCall("getState", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as ANNRegistry__getStateResultValue0Struct
    );
  }

  getUintValueForStateAttribute(assetId: Bytes, attribute: Bytes): BigInt {
    let result = super.call("getUintValueForStateAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toBigInt();
  }

  try_getUintValueForStateAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("getUintValueForStateAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  hasAccess(assetId: Bytes, methodSignature: Bytes, account: Address): boolean {
    let result = super.call("hasAccess", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(methodSignature),
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasAccess(
    assetId: Bytes,
    methodSignature: Bytes,
    account: Address
  ): CallResult<boolean> {
    let result = super.tryCall("hasAccess", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(methodSignature),
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  hasRootAccess(assetId: Bytes, account: Address): boolean {
    let result = super.call("hasRootAccess", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRootAccess(assetId: Bytes, account: Address): CallResult<boolean> {
    let result = super.tryCall("hasRootAccess", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isEventSettled(
    assetId: Bytes,
    _event: Bytes
  ): ANNRegistry__isEventSettledResult {
    let result = super.call("isEventSettled", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(_event)
    ]);

    return new ANNRegistry__isEventSettledResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_isEventSettled(
    assetId: Bytes,
    _event: Bytes
  ): CallResult<ANNRegistry__isEventSettledResult> {
    let result = super.tryCall("isEventSettled", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(_event)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ANNRegistry__isEventSettledResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  isRegistered(assetId: Bytes): boolean {
    let result = super.call("isRegistered", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBoolean();
  }

  try_isRegistered(assetId: Bytes): CallResult<boolean> {
    let result = super.tryCall("isRegistered", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  popNextScheduledEvent(assetId: Bytes): Bytes {
    let result = super.call("popNextScheduledEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_popNextScheduledEvent(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("popNextScheduledEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  popPendingEvent(assetId: Bytes): Bytes {
    let result = super.call("popPendingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_popPendingEvent(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("popPendingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getTerms(assetId: Bytes): ANNRegistry__getTermsResultValue0Struct {
    let result = super.call("getTerms", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toTuple() as ANNRegistry__getTermsResultValue0Struct;
  }

  try_getTerms(
    assetId: Bytes
  ): CallResult<ANNRegistry__getTermsResultValue0Struct> {
    let result = super.tryCall("getTerms", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as ANNRegistry__getTermsResultValue0Struct
    );
  }

  getEnumValueForTermsAttribute(assetId: Bytes, attribute: Bytes): i32 {
    let result = super.call("getEnumValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toI32();
  }

  try_getEnumValueForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<i32> {
    let result = super.tryCall("getEnumValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getAddressValueForTermsAttribute(assetId: Bytes, attribute: Bytes): Address {
    let result = super.call("getAddressValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toAddress();
  }

  try_getAddressValueForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<Address> {
    let result = super.tryCall("getAddressValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getBytes32ValueForTermsAttribute(assetId: Bytes, attribute: Bytes): Bytes {
    let result = super.call("getBytes32ValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toBytes();
  }

  try_getBytes32ValueForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<Bytes> {
    let result = super.tryCall("getBytes32ValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getUIntValueForForTermsAttribute(assetId: Bytes, attribute: Bytes): BigInt {
    let result = super.call("getUIntValueForForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toBigInt();
  }

  try_getUIntValueForForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("getUIntValueForForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getIntValueForForTermsAttribute(assetId: Bytes, attribute: Bytes): BigInt {
    let result = super.call("getIntValueForForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toBigInt();
  }

  try_getIntValueForForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("getIntValueForForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPeriodValueForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): ANNRegistry__getPeriodValueForTermsAttributeResultValue0Struct {
    let result = super.call("getPeriodValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toTuple() as ANNRegistry__getPeriodValueForTermsAttributeResultValue0Struct;
  }

  try_getPeriodValueForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<
    ANNRegistry__getPeriodValueForTermsAttributeResultValue0Struct
  > {
    let result = super.tryCall("getPeriodValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as ANNRegistry__getPeriodValueForTermsAttributeResultValue0Struct
    );
  }

  getCycleValueForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): ANNRegistry__getCycleValueForTermsAttributeResultValue0Struct {
    let result = super.call("getCycleValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toTuple() as ANNRegistry__getCycleValueForTermsAttributeResultValue0Struct;
  }

  try_getCycleValueForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<ANNRegistry__getCycleValueForTermsAttributeResultValue0Struct> {
    let result = super.tryCall("getCycleValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as ANNRegistry__getCycleValueForTermsAttributeResultValue0Struct
    );
  }

  getContractReferenceValueForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): ANNRegistry__getContractReferenceValueForTermsAttributeResultValue0Struct {
    let result = super.call("getContractReferenceValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);

    return result[0].toTuple() as ANNRegistry__getContractReferenceValueForTermsAttributeResultValue0Struct;
  }

  try_getContractReferenceValueForTermsAttribute(
    assetId: Bytes,
    attribute: Bytes
  ): CallResult<
    ANNRegistry__getContractReferenceValueForTermsAttributeResultValue0Struct
  > {
    let result = super.tryCall("getContractReferenceValueForTermsAttribute", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(attribute)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as ANNRegistry__getContractReferenceValueForTermsAttributeResultValue0Struct
    );
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GrantAccessCall extends EthereumCall {
  get inputs(): GrantAccessCall__Inputs {
    return new GrantAccessCall__Inputs(this);
  }

  get outputs(): GrantAccessCall__Outputs {
    return new GrantAccessCall__Outputs(this);
  }
}

export class GrantAccessCall__Inputs {
  _call: GrantAccessCall;

  constructor(call: GrantAccessCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get methodSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class GrantAccessCall__Outputs {
  _call: GrantAccessCall;

  constructor(call: GrantAccessCall) {
    this._call = call;
  }
}

export class HasAccessCall extends EthereumCall {
  get inputs(): HasAccessCall__Inputs {
    return new HasAccessCall__Inputs(this);
  }

  get outputs(): HasAccessCall__Outputs {
    return new HasAccessCall__Outputs(this);
  }
}

export class HasAccessCall__Inputs {
  _call: HasAccessCall;

  constructor(call: HasAccessCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get methodSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class HasAccessCall__Outputs {
  _call: HasAccessCall;

  constructor(call: HasAccessCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class HasRootAccessCall extends EthereumCall {
  get inputs(): HasRootAccessCall__Inputs {
    return new HasRootAccessCall__Inputs(this);
  }

  get outputs(): HasRootAccessCall__Outputs {
    return new HasRootAccessCall__Outputs(this);
  }
}

export class HasRootAccessCall__Inputs {
  _call: HasRootAccessCall;

  constructor(call: HasRootAccessCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class HasRootAccessCall__Outputs {
  _call: HasRootAccessCall;

  constructor(call: HasRootAccessCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MarkEventAsSettledCall extends EthereumCall {
  get inputs(): MarkEventAsSettledCall__Inputs {
    return new MarkEventAsSettledCall__Inputs(this);
  }

  get outputs(): MarkEventAsSettledCall__Outputs {
    return new MarkEventAsSettledCall__Outputs(this);
  }
}

export class MarkEventAsSettledCall__Inputs {
  _call: MarkEventAsSettledCall;

  constructor(call: MarkEventAsSettledCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _event(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _payoff(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MarkEventAsSettledCall__Outputs {
  _call: MarkEventAsSettledCall;

  constructor(call: MarkEventAsSettledCall) {
    this._call = call;
  }
}

export class PopNextScheduledEventCall extends EthereumCall {
  get inputs(): PopNextScheduledEventCall__Inputs {
    return new PopNextScheduledEventCall__Inputs(this);
  }

  get outputs(): PopNextScheduledEventCall__Outputs {
    return new PopNextScheduledEventCall__Outputs(this);
  }
}

export class PopNextScheduledEventCall__Inputs {
  _call: PopNextScheduledEventCall;

  constructor(call: PopNextScheduledEventCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PopNextScheduledEventCall__Outputs {
  _call: PopNextScheduledEventCall;

  constructor(call: PopNextScheduledEventCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PopPendingEventCall extends EthereumCall {
  get inputs(): PopPendingEventCall__Inputs {
    return new PopPendingEventCall__Inputs(this);
  }

  get outputs(): PopPendingEventCall__Outputs {
    return new PopPendingEventCall__Outputs(this);
  }
}

export class PopPendingEventCall__Inputs {
  _call: PopPendingEventCall;

  constructor(call: PopPendingEventCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PopPendingEventCall__Outputs {
  _call: PopPendingEventCall;

  constructor(call: PopPendingEventCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PushPendingEventCall extends EthereumCall {
  get inputs(): PushPendingEventCall__Inputs {
    return new PushPendingEventCall__Inputs(this);
  }

  get outputs(): PushPendingEventCall__Outputs {
    return new PushPendingEventCall__Outputs(this);
  }
}

export class PushPendingEventCall__Inputs {
  _call: PushPendingEventCall;

  constructor(call: PushPendingEventCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get pendingEvent(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PushPendingEventCall__Outputs {
  _call: PushPendingEventCall;

  constructor(call: PushPendingEventCall) {
    this._call = call;
  }
}

export class RevokeAccessCall extends EthereumCall {
  get inputs(): RevokeAccessCall__Inputs {
    return new RevokeAccessCall__Inputs(this);
  }

  get outputs(): RevokeAccessCall__Outputs {
    return new RevokeAccessCall__Outputs(this);
  }
}

export class RevokeAccessCall__Inputs {
  _call: RevokeAccessCall;

  constructor(call: RevokeAccessCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get methodSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RevokeAccessCall__Outputs {
  _call: RevokeAccessCall;

  constructor(call: RevokeAccessCall) {
    this._call = call;
  }
}

export class SetActorCall extends EthereumCall {
  get inputs(): SetActorCall__Inputs {
    return new SetActorCall__Inputs(this);
  }

  get outputs(): SetActorCall__Outputs {
    return new SetActorCall__Outputs(this);
  }
}

export class SetActorCall__Inputs {
  _call: SetActorCall;

  constructor(call: SetActorCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get actor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetActorCall__Outputs {
  _call: SetActorCall;

  constructor(call: SetActorCall) {
    this._call = call;
  }
}

export class SetCounterpartyBeneficiaryCall extends EthereumCall {
  get inputs(): SetCounterpartyBeneficiaryCall__Inputs {
    return new SetCounterpartyBeneficiaryCall__Inputs(this);
  }

  get outputs(): SetCounterpartyBeneficiaryCall__Outputs {
    return new SetCounterpartyBeneficiaryCall__Outputs(this);
  }
}

export class SetCounterpartyBeneficiaryCall__Inputs {
  _call: SetCounterpartyBeneficiaryCall;

  constructor(call: SetCounterpartyBeneficiaryCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newCounterpartyBeneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCounterpartyBeneficiaryCall__Outputs {
  _call: SetCounterpartyBeneficiaryCall;

  constructor(call: SetCounterpartyBeneficiaryCall) {
    this._call = call;
  }
}

export class SetCounterpartyObligorCall extends EthereumCall {
  get inputs(): SetCounterpartyObligorCall__Inputs {
    return new SetCounterpartyObligorCall__Inputs(this);
  }

  get outputs(): SetCounterpartyObligorCall__Outputs {
    return new SetCounterpartyObligorCall__Outputs(this);
  }
}

export class SetCounterpartyObligorCall__Inputs {
  _call: SetCounterpartyObligorCall;

  constructor(call: SetCounterpartyObligorCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newCounterpartyObligor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCounterpartyObligorCall__Outputs {
  _call: SetCounterpartyObligorCall;

  constructor(call: SetCounterpartyObligorCall) {
    this._call = call;
  }
}

export class SetCreatorBeneficiaryCall extends EthereumCall {
  get inputs(): SetCreatorBeneficiaryCall__Inputs {
    return new SetCreatorBeneficiaryCall__Inputs(this);
  }

  get outputs(): SetCreatorBeneficiaryCall__Outputs {
    return new SetCreatorBeneficiaryCall__Outputs(this);
  }
}

export class SetCreatorBeneficiaryCall__Inputs {
  _call: SetCreatorBeneficiaryCall;

  constructor(call: SetCreatorBeneficiaryCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newCreatorBeneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCreatorBeneficiaryCall__Outputs {
  _call: SetCreatorBeneficiaryCall;

  constructor(call: SetCreatorBeneficiaryCall) {
    this._call = call;
  }
}

export class SetCreatorObligorCall extends EthereumCall {
  get inputs(): SetCreatorObligorCall__Inputs {
    return new SetCreatorObligorCall__Inputs(this);
  }

  get outputs(): SetCreatorObligorCall__Outputs {
    return new SetCreatorObligorCall__Outputs(this);
  }
}

export class SetCreatorObligorCall__Inputs {
  _call: SetCreatorObligorCall;

  constructor(call: SetCreatorObligorCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newCreatorObligor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCreatorObligorCall__Outputs {
  _call: SetCreatorObligorCall;

  constructor(call: SetCreatorObligorCall) {
    this._call = call;
  }
}

export class SetEngineCall extends EthereumCall {
  get inputs(): SetEngineCall__Inputs {
    return new SetEngineCall__Inputs(this);
  }

  get outputs(): SetEngineCall__Outputs {
    return new SetEngineCall__Outputs(this);
  }
}

export class SetEngineCall__Inputs {
  _call: SetEngineCall;

  constructor(call: SetEngineCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get engine(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetEngineCall__Outputs {
  _call: SetEngineCall;

  constructor(call: SetEngineCall) {
    this._call = call;
  }
}

export class SetFinalizedStateCall extends EthereumCall {
  get inputs(): SetFinalizedStateCall__Inputs {
    return new SetFinalizedStateCall__Inputs(this);
  }

  get outputs(): SetFinalizedStateCall__Outputs {
    return new SetFinalizedStateCall__Outputs(this);
  }
}

export class SetFinalizedStateCall__Inputs {
  _call: SetFinalizedStateCall;

  constructor(call: SetFinalizedStateCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get state(): SetFinalizedStateCallStateStruct {
    return this._call.inputValues[1].value.toTuple() as SetFinalizedStateCallStateStruct;
  }
}

export class SetFinalizedStateCall__Outputs {
  _call: SetFinalizedStateCall;

  constructor(call: SetFinalizedStateCall) {
    this._call = call;
  }
}

export class SetFinalizedStateCallStateStruct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get exerciseDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get lastCouponDay(): BigInt {
    return this[6].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[7].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[8].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[9].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[10].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[11].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[12].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[13].toBigInt();
  }

  get exerciseAmount(): BigInt {
    return this[14].toBigInt();
  }

  get exerciseQuantity(): BigInt {
    return this[15].toBigInt();
  }

  get quantity(): BigInt {
    return this[16].toBigInt();
  }

  get couponAmountFixed(): BigInt {
    return this[17].toBigInt();
  }

  get marginFactor(): BigInt {
    return this[18].toBigInt();
  }

  get adjustmentFactor(): BigInt {
    return this[19].toBigInt();
  }
}

export class SetStateCall extends EthereumCall {
  get inputs(): SetStateCall__Inputs {
    return new SetStateCall__Inputs(this);
  }

  get outputs(): SetStateCall__Outputs {
    return new SetStateCall__Outputs(this);
  }
}

export class SetStateCall__Inputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get state(): SetStateCallStateStruct {
    return this._call.inputValues[1].value.toTuple() as SetStateCallStateStruct;
  }
}

export class SetStateCall__Outputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }
}

export class SetStateCallStateStruct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get exerciseDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get lastCouponDay(): BigInt {
    return this[6].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[7].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[8].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[9].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[10].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[11].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[12].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[13].toBigInt();
  }

  get exerciseAmount(): BigInt {
    return this[14].toBigInt();
  }

  get exerciseQuantity(): BigInt {
    return this[15].toBigInt();
  }

  get quantity(): BigInt {
    return this[16].toBigInt();
  }

  get couponAmountFixed(): BigInt {
    return this[17].toBigInt();
  }

  get marginFactor(): BigInt {
    return this[18].toBigInt();
  }

  get adjustmentFactor(): BigInt {
    return this[19].toBigInt();
  }
}

export class RegisterAssetCall extends EthereumCall {
  get inputs(): RegisterAssetCall__Inputs {
    return new RegisterAssetCall__Inputs(this);
  }

  get outputs(): RegisterAssetCall__Outputs {
    return new RegisterAssetCall__Outputs(this);
  }
}

export class RegisterAssetCall__Inputs {
  _call: RegisterAssetCall;

  constructor(call: RegisterAssetCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get terms(): RegisterAssetCallTermsStruct {
    return this._call.inputValues[1].value.toTuple() as RegisterAssetCallTermsStruct;
  }

  get state(): RegisterAssetCallStateStruct {
    return this._call.inputValues[2].value.toTuple() as RegisterAssetCallStateStruct;
  }

  get schedule(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get ownership(): RegisterAssetCallOwnershipStruct {
    return this._call.inputValues[4].value.toTuple() as RegisterAssetCallOwnershipStruct;
  }

  get engine(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get actor(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get admin(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class RegisterAssetCall__Outputs {
  _call: RegisterAssetCall;

  constructor(call: RegisterAssetCall) {
    this._call = call;
  }
}

export class RegisterAssetCallTermsStruct extends EthereumTuple {
  get contractType(): i32 {
    return this[0].toI32();
  }

  get calendar(): i32 {
    return this[1].toI32();
  }

  get contractRole(): i32 {
    return this[2].toI32();
  }

  get dayCountConvention(): i32 {
    return this[3].toI32();
  }

  get businessDayConvention(): i32 {
    return this[4].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[5].toI32();
  }

  get scalingEffect(): i32 {
    return this[6].toI32();
  }

  get penaltyType(): i32 {
    return this[7].toI32();
  }

  get feeBasis(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get contractDealDate(): BigInt {
    return this[12].toBigInt();
  }

  get statusDate(): BigInt {
    return this[13].toBigInt();
  }

  get initialExchangeDate(): BigInt {
    return this[14].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[15].toBigInt();
  }

  get purchaseDate(): BigInt {
    return this[16].toBigInt();
  }

  get capitalizationEndDate(): BigInt {
    return this[17].toBigInt();
  }

  get cycleAnchorDateOfInterestPayment(): BigInt {
    return this[18].toBigInt();
  }

  get cycleAnchorDateOfRateReset(): BigInt {
    return this[19].toBigInt();
  }

  get cycleAnchorDateOfScalingIndex(): BigInt {
    return this[20].toBigInt();
  }

  get cycleAnchorDateOfFee(): BigInt {
    return this[21].toBigInt();
  }

  get cycleAnchorDateOfPrincipalRedemption(): BigInt {
    return this[22].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[23].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[24].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[25].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[26].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[27].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[28].toBigInt();
  }

  get feeRate(): BigInt {
    return this[29].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[30].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[31].toBigInt();
  }

  get delinquencyRate(): BigInt {
    return this[32].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[33].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[34].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[35].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[36].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[37].toBigInt();
  }

  get periodCap(): BigInt {
    return this[38].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[39].toBigInt();
  }

  get gracePeriod(): RegisterAssetCallTermsGracePeriodStruct {
    return this[40].toTuple() as RegisterAssetCallTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): RegisterAssetCallTermsDelinquencyPeriodStruct {
    return this[41].toTuple() as RegisterAssetCallTermsDelinquencyPeriodStruct;
  }

  get cycleOfInterestPayment(): RegisterAssetCallTermsCycleOfInterestPaymentStruct {
    return this[42].toTuple() as RegisterAssetCallTermsCycleOfInterestPaymentStruct;
  }

  get cycleOfRateReset(): RegisterAssetCallTermsCycleOfRateResetStruct {
    return this[43].toTuple() as RegisterAssetCallTermsCycleOfRateResetStruct;
  }

  get cycleOfScalingIndex(): RegisterAssetCallTermsCycleOfScalingIndexStruct {
    return this[44].toTuple() as RegisterAssetCallTermsCycleOfScalingIndexStruct;
  }

  get cycleOfFee(): RegisterAssetCallTermsCycleOfFeeStruct {
    return this[45].toTuple() as RegisterAssetCallTermsCycleOfFeeStruct;
  }

  get cycleOfPrincipalRedemption(): RegisterAssetCallTermsCycleOfPrincipalRedemptionStruct {
    return this[46].toTuple() as RegisterAssetCallTermsCycleOfPrincipalRedemptionStruct;
  }
}

export class RegisterAssetCallTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class RegisterAssetCallTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class RegisterAssetCallTermsCycleOfInterestPaymentStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class RegisterAssetCallTermsCycleOfRateResetStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class RegisterAssetCallTermsCycleOfScalingIndexStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class RegisterAssetCallTermsCycleOfFeeStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class RegisterAssetCallTermsCycleOfPrincipalRedemptionStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class RegisterAssetCallStateStruct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get exerciseDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get lastCouponDay(): BigInt {
    return this[6].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[7].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[8].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[9].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[10].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[11].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[12].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[13].toBigInt();
  }

  get exerciseAmount(): BigInt {
    return this[14].toBigInt();
  }

  get exerciseQuantity(): BigInt {
    return this[15].toBigInt();
  }

  get quantity(): BigInt {
    return this[16].toBigInt();
  }

  get couponAmountFixed(): BigInt {
    return this[17].toBigInt();
  }

  get marginFactor(): BigInt {
    return this[18].toBigInt();
  }

  get adjustmentFactor(): BigInt {
    return this[19].toBigInt();
  }
}

export class RegisterAssetCallOwnershipStruct extends EthereumTuple {
  get creatorObligor(): Address {
    return this[0].toAddress();
  }

  get creatorBeneficiary(): Address {
    return this[1].toAddress();
  }

  get counterpartyObligor(): Address {
    return this[2].toAddress();
  }

  get counterpartyBeneficiary(): Address {
    return this[3].toAddress();
  }
}

export class SetTermsCall extends EthereumCall {
  get inputs(): SetTermsCall__Inputs {
    return new SetTermsCall__Inputs(this);
  }

  get outputs(): SetTermsCall__Outputs {
    return new SetTermsCall__Outputs(this);
  }
}

export class SetTermsCall__Inputs {
  _call: SetTermsCall;

  constructor(call: SetTermsCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get terms(): SetTermsCallTermsStruct {
    return this._call.inputValues[1].value.toTuple() as SetTermsCallTermsStruct;
  }
}

export class SetTermsCall__Outputs {
  _call: SetTermsCall;

  constructor(call: SetTermsCall) {
    this._call = call;
  }
}

export class SetTermsCallTermsStruct extends EthereumTuple {
  get contractType(): i32 {
    return this[0].toI32();
  }

  get calendar(): i32 {
    return this[1].toI32();
  }

  get contractRole(): i32 {
    return this[2].toI32();
  }

  get dayCountConvention(): i32 {
    return this[3].toI32();
  }

  get businessDayConvention(): i32 {
    return this[4].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[5].toI32();
  }

  get scalingEffect(): i32 {
    return this[6].toI32();
  }

  get penaltyType(): i32 {
    return this[7].toI32();
  }

  get feeBasis(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get contractDealDate(): BigInt {
    return this[12].toBigInt();
  }

  get statusDate(): BigInt {
    return this[13].toBigInt();
  }

  get initialExchangeDate(): BigInt {
    return this[14].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[15].toBigInt();
  }

  get purchaseDate(): BigInt {
    return this[16].toBigInt();
  }

  get capitalizationEndDate(): BigInt {
    return this[17].toBigInt();
  }

  get cycleAnchorDateOfInterestPayment(): BigInt {
    return this[18].toBigInt();
  }

  get cycleAnchorDateOfRateReset(): BigInt {
    return this[19].toBigInt();
  }

  get cycleAnchorDateOfScalingIndex(): BigInt {
    return this[20].toBigInt();
  }

  get cycleAnchorDateOfFee(): BigInt {
    return this[21].toBigInt();
  }

  get cycleAnchorDateOfPrincipalRedemption(): BigInt {
    return this[22].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[23].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[24].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[25].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[26].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[27].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[28].toBigInt();
  }

  get feeRate(): BigInt {
    return this[29].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[30].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[31].toBigInt();
  }

  get delinquencyRate(): BigInt {
    return this[32].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[33].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[34].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[35].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[36].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[37].toBigInt();
  }

  get periodCap(): BigInt {
    return this[38].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[39].toBigInt();
  }

  get gracePeriod(): SetTermsCallTermsGracePeriodStruct {
    return this[40].toTuple() as SetTermsCallTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): SetTermsCallTermsDelinquencyPeriodStruct {
    return this[41].toTuple() as SetTermsCallTermsDelinquencyPeriodStruct;
  }

  get cycleOfInterestPayment(): SetTermsCallTermsCycleOfInterestPaymentStruct {
    return this[42].toTuple() as SetTermsCallTermsCycleOfInterestPaymentStruct;
  }

  get cycleOfRateReset(): SetTermsCallTermsCycleOfRateResetStruct {
    return this[43].toTuple() as SetTermsCallTermsCycleOfRateResetStruct;
  }

  get cycleOfScalingIndex(): SetTermsCallTermsCycleOfScalingIndexStruct {
    return this[44].toTuple() as SetTermsCallTermsCycleOfScalingIndexStruct;
  }

  get cycleOfFee(): SetTermsCallTermsCycleOfFeeStruct {
    return this[45].toTuple() as SetTermsCallTermsCycleOfFeeStruct;
  }

  get cycleOfPrincipalRedemption(): SetTermsCallTermsCycleOfPrincipalRedemptionStruct {
    return this[46].toTuple() as SetTermsCallTermsCycleOfPrincipalRedemptionStruct;
  }
}

export class SetTermsCallTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class SetTermsCallTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class SetTermsCallTermsCycleOfInterestPaymentStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class SetTermsCallTermsCycleOfRateResetStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class SetTermsCallTermsCycleOfScalingIndexStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class SetTermsCallTermsCycleOfFeeStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class SetTermsCallTermsCycleOfPrincipalRedemptionStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}
