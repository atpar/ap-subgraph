// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DataPoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DataPoint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DataPoint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DataPoint", id.toString(), this);
  }

  static load(id: string): DataPoint | null {
    return store.get("DataPoint", id) as DataPoint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dataPoint(): BigInt {
    let value = this.get("dataPoint");
    return value.toBigInt();
  }

  set dataPoint(value: BigInt) {
    this.set("dataPoint", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get dataSet(): string {
    let value = this.get("dataSet");
    return value.toString();
  }

  set dataSet(value: string) {
    this.set("dataSet", Value.fromString(value));
  }
}

export class DataSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DataSet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DataSet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DataSet", id.toString(), this);
  }

  static load(id: string): DataSet | null {
    return store.get("DataSet", id) as DataSet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get dataPoints(): Array<string> | null {
    let value = this.get("dataPoints");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set dataPoints(value: Array<string> | null) {
    if (value === null) {
      this.unset("dataPoints");
    } else {
      this.set("dataPoints", Value.fromStringArray(value as Array<string>));
    }
  }

  get lastUpdated(): BigInt | null {
    let value = this.get("lastUpdated");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt | null) {
    if (value === null) {
      this.unset("lastUpdated");
    } else {
      this.set("lastUpdated", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Holder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Holder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Holder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Holder", id.toString(), this);
  }

  static load(id: string): Holder | null {
    return store.get("Holder", id) as Holder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get balanceOf(): BigInt {
    let value = this.get("balanceOf");
    return value.toBigInt();
  }

  set balanceOf(value: BigInt) {
    this.set("balanceOf", Value.fromBigInt(value));
  }

  get withdrawnFundsOf(): BigInt {
    let value = this.get("withdrawnFundsOf");
    return value.toBigInt();
  }

  set withdrawnFundsOf(value: BigInt) {
    this.set("withdrawnFundsOf", Value.fromBigInt(value));
  }

  get distributor(): string {
    let value = this.get("distributor");
    return value.toString();
  }

  set distributor(value: string) {
    this.set("distributor", Value.fromString(value));
  }
}

export class Distributor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Distributor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Distributor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Distributor", id.toString(), this);
  }

  static load(id: string): Distributor | null {
    return store.get("Distributor", id) as Distributor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get holder(): Array<string> {
    let value = this.get("holder");
    return value.toStringArray();
  }

  set holder(value: Array<string>) {
    this.set("holder", Value.fromStringArray(value));
  }
}

export class Period extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Period entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Period entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Period", id.toString(), this);
  }

  static load(id: string): Period | null {
    return store.get("Period", id) as Period | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get i(): BigInt {
    let value = this.get("i");
    return value.toBigInt();
  }

  set i(value: BigInt) {
    this.set("i", Value.fromBigInt(value));
  }

  get p(): i32 {
    let value = this.get("p");
    return value.toI32();
  }

  set p(value: i32) {
    this.set("p", Value.fromI32(value));
  }

  get isSet(): boolean {
    let value = this.get("isSet");
    return value.toBoolean();
  }

  set isSet(value: boolean) {
    this.set("isSet", Value.fromBoolean(value));
  }
}

export class Cycle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Cycle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Cycle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Cycle", id.toString(), this);
  }

  static load(id: string): Cycle | null {
    return store.get("Cycle", id) as Cycle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get i(): BigInt {
    let value = this.get("i");
    return value.toBigInt();
  }

  set i(value: BigInt) {
    this.set("i", Value.fromBigInt(value));
  }

  get p(): i32 {
    let value = this.get("p");
    return value.toI32();
  }

  set p(value: i32) {
    this.set("p", Value.fromI32(value));
  }

  get s(): i32 {
    let value = this.get("s");
    return value.toI32();
  }

  set s(value: i32) {
    this.set("s", Value.fromI32(value));
  }

  get isSet(): boolean {
    let value = this.get("isSet");
    return value.toBoolean();
  }

  set isSet(value: boolean) {
    this.set("isSet", Value.fromBoolean(value));
  }
}

export class ContractReference extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ContractReference entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ContractReference entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ContractReference", id.toString(), this);
  }

  static load(id: string): ContractReference | null {
    return store.get("ContractReference", id) as ContractReference | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get object(): Bytes {
    let value = this.get("object");
    return value.toBytes();
  }

  set object(value: Bytes) {
    this.set("object", Value.fromBytes(value));
  }

  get object2(): Bytes {
    let value = this.get("object2");
    return value.toBytes();
  }

  set object2(value: Bytes) {
    this.set("object2", Value.fromBytes(value));
  }

  get _type(): i32 {
    let value = this.get("_type");
    return value.toI32();
  }

  set _type(value: i32) {
    this.set("_type", Value.fromI32(value));
  }

  get role(): i32 {
    let value = this.get("role");
    return value.toI32();
  }

  set role(value: i32) {
    this.set("role", Value.fromI32(value));
  }
}

export class AssetOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AssetOwnership entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AssetOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AssetOwnership", id.toString(), this);
  }

  static load(id: string): AssetOwnership | null {
    return store.get("AssetOwnership", id) as AssetOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creatorObligor(): Bytes {
    let value = this.get("creatorObligor");
    return value.toBytes();
  }

  set creatorObligor(value: Bytes) {
    this.set("creatorObligor", Value.fromBytes(value));
  }

  get creatorBeneficiary(): Bytes {
    let value = this.get("creatorBeneficiary");
    return value.toBytes();
  }

  set creatorBeneficiary(value: Bytes) {
    this.set("creatorBeneficiary", Value.fromBytes(value));
  }

  get counterpartyObligor(): Bytes {
    let value = this.get("counterpartyObligor");
    return value.toBytes();
  }

  set counterpartyObligor(value: Bytes) {
    this.set("counterpartyObligor", Value.fromBytes(value));
  }

  get counterpartyBeneficiary(): Bytes {
    let value = this.get("counterpartyBeneficiary");
    return value.toBytes();
  }

  set counterpartyBeneficiary(value: Bytes) {
    this.set("counterpartyBeneficiary", Value.fromBytes(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }
}

export class Schedule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Schedule entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Schedule entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Schedule", id.toString(), this);
  }

  static load(id: string): Schedule | null {
    return store.get("Schedule", id) as Schedule | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get events(): Array<Bytes> {
    let value = this.get("events");
    return value.toBytesArray();
  }

  set events(value: Array<Bytes>) {
    this.set("events", Value.fromBytesArray(value));
  }

  get nextScheduleIndex(): BigInt {
    let value = this.get("nextScheduleIndex");
    return value.toBigInt();
  }

  set nextScheduleIndex(value: BigInt) {
    this.set("nextScheduleIndex", Value.fromBigInt(value));
  }

  get pendingEvent(): Bytes {
    let value = this.get("pendingEvent");
    return value.toBytes();
  }

  set pendingEvent(value: Bytes) {
    this.set("pendingEvent", Value.fromBytes(value));
  }

  get nextScheduledEvent(): Bytes {
    let value = this.get("nextScheduledEvent");
    return value.toBytes();
  }

  set nextScheduledEvent(value: Bytes) {
    this.set("nextScheduledEvent", Value.fromBytes(value));
  }

  get nextUnderlyingEvent(): Bytes {
    let value = this.get("nextUnderlyingEvent");
    return value.toBytes();
  }

  set nextUnderlyingEvent(value: Bytes) {
    this.set("nextUnderlyingEvent", Value.fromBytes(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }
}

export class Admins extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Admins entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Admins entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Admins", id.toString(), this);
  }

  static load(id: string): Admins | null {
    return store.get("Admins", id) as Admins | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accounts(): Array<Bytes> {
    let value = this.get("accounts");
    return value.toBytesArray();
  }

  set accounts(value: Array<Bytes>) {
    this.set("accounts", Value.fromBytesArray(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }
}

export class State extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save State entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save State entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("State", id.toString(), this);
  }

  static load(id: string): State | null {
    return store.get("State", id) as State | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractPerformance(): i32 {
    let value = this.get("contractPerformance");
    return value.toI32();
  }

  set contractPerformance(value: i32) {
    this.set("contractPerformance", Value.fromI32(value));
  }

  get statusDate(): BigInt {
    let value = this.get("statusDate");
    return value.toBigInt();
  }

  set statusDate(value: BigInt) {
    this.set("statusDate", Value.fromBigInt(value));
  }

  get nonPerformingDate(): BigInt {
    let value = this.get("nonPerformingDate");
    return value.toBigInt();
  }

  set nonPerformingDate(value: BigInt) {
    this.set("nonPerformingDate", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    return value.toBigInt();
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get exerciseDate(): BigInt {
    let value = this.get("exerciseDate");
    return value.toBigInt();
  }

  set exerciseDate(value: BigInt) {
    this.set("exerciseDate", Value.fromBigInt(value));
  }

  get terminationDate(): BigInt {
    let value = this.get("terminationDate");
    return value.toBigInt();
  }

  set terminationDate(value: BigInt) {
    this.set("terminationDate", Value.fromBigInt(value));
  }

  get lastCouponFixingDate(): BigInt {
    let value = this.get("lastCouponFixingDate");
    return value.toBigInt();
  }

  set lastCouponFixingDate(value: BigInt) {
    this.set("lastCouponFixingDate", Value.fromBigInt(value));
  }

  get lastDividendFixingDate(): BigInt {
    let value = this.get("lastDividendFixingDate");
    return value.toBigInt();
  }

  set lastDividendFixingDate(value: BigInt) {
    this.set("lastDividendFixingDate", Value.fromBigInt(value));
  }

  get notionalPrincipal(): BigInt {
    let value = this.get("notionalPrincipal");
    return value.toBigInt();
  }

  set notionalPrincipal(value: BigInt) {
    this.set("notionalPrincipal", Value.fromBigInt(value));
  }

  get accruedInterest(): BigInt {
    let value = this.get("accruedInterest");
    return value.toBigInt();
  }

  set accruedInterest(value: BigInt) {
    this.set("accruedInterest", Value.fromBigInt(value));
  }

  get feeAccrued(): BigInt {
    let value = this.get("feeAccrued");
    return value.toBigInt();
  }

  set feeAccrued(value: BigInt) {
    this.set("feeAccrued", Value.fromBigInt(value));
  }

  get nominalInterestRate(): BigInt {
    let value = this.get("nominalInterestRate");
    return value.toBigInt();
  }

  set nominalInterestRate(value: BigInt) {
    this.set("nominalInterestRate", Value.fromBigInt(value));
  }

  get interestScalingMultiplier(): BigInt {
    let value = this.get("interestScalingMultiplier");
    return value.toBigInt();
  }

  set interestScalingMultiplier(value: BigInt) {
    this.set("interestScalingMultiplier", Value.fromBigInt(value));
  }

  get notionalScalingMultiplier(): BigInt {
    let value = this.get("notionalScalingMultiplier");
    return value.toBigInt();
  }

  set notionalScalingMultiplier(value: BigInt) {
    this.set("notionalScalingMultiplier", Value.fromBigInt(value));
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    let value = this.get("nextPrincipalRedemptionPayment");
    return value.toBigInt();
  }

  set nextPrincipalRedemptionPayment(value: BigInt) {
    this.set("nextPrincipalRedemptionPayment", Value.fromBigInt(value));
  }

  get exerciseAmount(): BigInt {
    let value = this.get("exerciseAmount");
    return value.toBigInt();
  }

  set exerciseAmount(value: BigInt) {
    this.set("exerciseAmount", Value.fromBigInt(value));
  }

  get exerciseQuantity(): BigInt {
    let value = this.get("exerciseQuantity");
    return value.toBigInt();
  }

  set exerciseQuantity(value: BigInt) {
    this.set("exerciseQuantity", Value.fromBigInt(value));
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    return value.toBigInt();
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }

  get couponAmountFixed(): BigInt {
    let value = this.get("couponAmountFixed");
    return value.toBigInt();
  }

  set couponAmountFixed(value: BigInt) {
    this.set("couponAmountFixed", Value.fromBigInt(value));
  }

  get marginFactor(): BigInt {
    let value = this.get("marginFactor");
    return value.toBigInt();
  }

  set marginFactor(value: BigInt) {
    this.set("marginFactor", Value.fromBigInt(value));
  }

  get adjustmentFactor(): BigInt {
    let value = this.get("adjustmentFactor");
    return value.toBigInt();
  }

  set adjustmentFactor(value: BigInt) {
    this.set("adjustmentFactor", Value.fromBigInt(value));
  }

  get dividendPaymentAmount(): BigInt {
    let value = this.get("dividendPaymentAmount");
    return value.toBigInt();
  }

  set dividendPaymentAmount(value: BigInt) {
    this.set("dividendPaymentAmount", Value.fromBigInt(value));
  }

  get splitRatio(): BigInt {
    let value = this.get("splitRatio");
    return value.toBigInt();
  }

  set splitRatio(value: BigInt) {
    this.set("splitRatio", Value.fromBigInt(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }
}

export class ANNTerms extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ANNTerms entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ANNTerms entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ANNTerms", id.toString(), this);
  }

  static load(id: string): ANNTerms | null {
    return store.get("ANNTerms", id) as ANNTerms | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractType(): i32 {
    let value = this.get("contractType");
    return value.toI32();
  }

  set contractType(value: i32) {
    this.set("contractType", Value.fromI32(value));
  }

  get calendar(): i32 {
    let value = this.get("calendar");
    return value.toI32();
  }

  set calendar(value: i32) {
    this.set("calendar", Value.fromI32(value));
  }

  get contractRole(): i32 {
    let value = this.get("contractRole");
    return value.toI32();
  }

  set contractRole(value: i32) {
    this.set("contractRole", Value.fromI32(value));
  }

  get dayCountConvention(): i32 {
    let value = this.get("dayCountConvention");
    return value.toI32();
  }

  set dayCountConvention(value: i32) {
    this.set("dayCountConvention", Value.fromI32(value));
  }

  get businessDayConvention(): i32 {
    let value = this.get("businessDayConvention");
    return value.toI32();
  }

  set businessDayConvention(value: i32) {
    this.set("businessDayConvention", Value.fromI32(value));
  }

  get endOfMonthConvention(): i32 {
    let value = this.get("endOfMonthConvention");
    return value.toI32();
  }

  set endOfMonthConvention(value: i32) {
    this.set("endOfMonthConvention", Value.fromI32(value));
  }

  get scalingEffect(): i32 {
    let value = this.get("scalingEffect");
    return value.toI32();
  }

  set scalingEffect(value: i32) {
    this.set("scalingEffect", Value.fromI32(value));
  }

  get penaltyType(): i32 {
    let value = this.get("penaltyType");
    return value.toI32();
  }

  set penaltyType(value: i32) {
    this.set("penaltyType", Value.fromI32(value));
  }

  get feeBasis(): i32 {
    let value = this.get("feeBasis");
    return value.toI32();
  }

  set feeBasis(value: i32) {
    this.set("feeBasis", Value.fromI32(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get settlementCurrency(): Bytes {
    let value = this.get("settlementCurrency");
    return value.toBytes();
  }

  set settlementCurrency(value: Bytes) {
    this.set("settlementCurrency", Value.fromBytes(value));
  }

  get marketObjectCodeRateReset(): Bytes {
    let value = this.get("marketObjectCodeRateReset");
    return value.toBytes();
  }

  set marketObjectCodeRateReset(value: Bytes) {
    this.set("marketObjectCodeRateReset", Value.fromBytes(value));
  }

  get contractDealDate(): BigInt {
    let value = this.get("contractDealDate");
    return value.toBigInt();
  }

  set contractDealDate(value: BigInt) {
    this.set("contractDealDate", Value.fromBigInt(value));
  }

  get statusDate(): BigInt {
    let value = this.get("statusDate");
    return value.toBigInt();
  }

  set statusDate(value: BigInt) {
    this.set("statusDate", Value.fromBigInt(value));
  }

  get initialExchangeDate(): BigInt {
    let value = this.get("initialExchangeDate");
    return value.toBigInt();
  }

  set initialExchangeDate(value: BigInt) {
    this.set("initialExchangeDate", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    return value.toBigInt();
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get purchaseDate(): BigInt {
    let value = this.get("purchaseDate");
    return value.toBigInt();
  }

  set purchaseDate(value: BigInt) {
    this.set("purchaseDate", Value.fromBigInt(value));
  }

  get capitalizationEndDate(): BigInt {
    let value = this.get("capitalizationEndDate");
    return value.toBigInt();
  }

  set capitalizationEndDate(value: BigInt) {
    this.set("capitalizationEndDate", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfInterestPayment(): BigInt {
    let value = this.get("cycleAnchorDateOfInterestPayment");
    return value.toBigInt();
  }

  set cycleAnchorDateOfInterestPayment(value: BigInt) {
    this.set("cycleAnchorDateOfInterestPayment", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfRateReset(): BigInt {
    let value = this.get("cycleAnchorDateOfRateReset");
    return value.toBigInt();
  }

  set cycleAnchorDateOfRateReset(value: BigInt) {
    this.set("cycleAnchorDateOfRateReset", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfScalingIndex(): BigInt {
    let value = this.get("cycleAnchorDateOfScalingIndex");
    return value.toBigInt();
  }

  set cycleAnchorDateOfScalingIndex(value: BigInt) {
    this.set("cycleAnchorDateOfScalingIndex", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfFee(): BigInt {
    let value = this.get("cycleAnchorDateOfFee");
    return value.toBigInt();
  }

  set cycleAnchorDateOfFee(value: BigInt) {
    this.set("cycleAnchorDateOfFee", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfPrincipalRedemption(): BigInt {
    let value = this.get("cycleAnchorDateOfPrincipalRedemption");
    return value.toBigInt();
  }

  set cycleAnchorDateOfPrincipalRedemption(value: BigInt) {
    this.set("cycleAnchorDateOfPrincipalRedemption", Value.fromBigInt(value));
  }

  get notionalPrincipal(): BigInt {
    let value = this.get("notionalPrincipal");
    return value.toBigInt();
  }

  set notionalPrincipal(value: BigInt) {
    this.set("notionalPrincipal", Value.fromBigInt(value));
  }

  get nominalInterestRate(): BigInt {
    let value = this.get("nominalInterestRate");
    return value.toBigInt();
  }

  set nominalInterestRate(value: BigInt) {
    this.set("nominalInterestRate", Value.fromBigInt(value));
  }

  get accruedInterest(): BigInt {
    let value = this.get("accruedInterest");
    return value.toBigInt();
  }

  set accruedInterest(value: BigInt) {
    this.set("accruedInterest", Value.fromBigInt(value));
  }

  get rateMultiplier(): BigInt {
    let value = this.get("rateMultiplier");
    return value.toBigInt();
  }

  set rateMultiplier(value: BigInt) {
    this.set("rateMultiplier", Value.fromBigInt(value));
  }

  get rateSpread(): BigInt {
    let value = this.get("rateSpread");
    return value.toBigInt();
  }

  set rateSpread(value: BigInt) {
    this.set("rateSpread", Value.fromBigInt(value));
  }

  get nextResetRate(): BigInt {
    let value = this.get("nextResetRate");
    return value.toBigInt();
  }

  set nextResetRate(value: BigInt) {
    this.set("nextResetRate", Value.fromBigInt(value));
  }

  get feeRate(): BigInt {
    let value = this.get("feeRate");
    return value.toBigInt();
  }

  set feeRate(value: BigInt) {
    this.set("feeRate", Value.fromBigInt(value));
  }

  get feeAccrued(): BigInt {
    let value = this.get("feeAccrued");
    return value.toBigInt();
  }

  set feeAccrued(value: BigInt) {
    this.set("feeAccrued", Value.fromBigInt(value));
  }

  get penaltyRate(): BigInt {
    let value = this.get("penaltyRate");
    return value.toBigInt();
  }

  set penaltyRate(value: BigInt) {
    this.set("penaltyRate", Value.fromBigInt(value));
  }

  get delinquencyRate(): BigInt {
    let value = this.get("delinquencyRate");
    return value.toBigInt();
  }

  set delinquencyRate(value: BigInt) {
    this.set("delinquencyRate", Value.fromBigInt(value));
  }

  get premiumDiscountAtIED(): BigInt {
    let value = this.get("premiumDiscountAtIED");
    return value.toBigInt();
  }

  set premiumDiscountAtIED(value: BigInt) {
    this.set("premiumDiscountAtIED", Value.fromBigInt(value));
  }

  get priceAtPurchaseDate(): BigInt {
    let value = this.get("priceAtPurchaseDate");
    return value.toBigInt();
  }

  set priceAtPurchaseDate(value: BigInt) {
    this.set("priceAtPurchaseDate", Value.fromBigInt(value));
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    let value = this.get("nextPrincipalRedemptionPayment");
    return value.toBigInt();
  }

  set nextPrincipalRedemptionPayment(value: BigInt) {
    this.set("nextPrincipalRedemptionPayment", Value.fromBigInt(value));
  }

  get lifeCap(): BigInt {
    let value = this.get("lifeCap");
    return value.toBigInt();
  }

  set lifeCap(value: BigInt) {
    this.set("lifeCap", Value.fromBigInt(value));
  }

  get lifeFloor(): BigInt {
    let value = this.get("lifeFloor");
    return value.toBigInt();
  }

  set lifeFloor(value: BigInt) {
    this.set("lifeFloor", Value.fromBigInt(value));
  }

  get periodCap(): BigInt {
    let value = this.get("periodCap");
    return value.toBigInt();
  }

  set periodCap(value: BigInt) {
    this.set("periodCap", Value.fromBigInt(value));
  }

  get periodFloor(): BigInt {
    let value = this.get("periodFloor");
    return value.toBigInt();
  }

  set periodFloor(value: BigInt) {
    this.set("periodFloor", Value.fromBigInt(value));
  }

  get gracePeriod(): string {
    let value = this.get("gracePeriod");
    return value.toString();
  }

  set gracePeriod(value: string) {
    this.set("gracePeriod", Value.fromString(value));
  }

  get delinquencyPeriod(): string {
    let value = this.get("delinquencyPeriod");
    return value.toString();
  }

  set delinquencyPeriod(value: string) {
    this.set("delinquencyPeriod", Value.fromString(value));
  }

  get cycleOfInterestPayment(): string {
    let value = this.get("cycleOfInterestPayment");
    return value.toString();
  }

  set cycleOfInterestPayment(value: string) {
    this.set("cycleOfInterestPayment", Value.fromString(value));
  }

  get cycleOfRateReset(): string {
    let value = this.get("cycleOfRateReset");
    return value.toString();
  }

  set cycleOfRateReset(value: string) {
    this.set("cycleOfRateReset", Value.fromString(value));
  }

  get cycleOfScalingIndex(): string {
    let value = this.get("cycleOfScalingIndex");
    return value.toString();
  }

  set cycleOfScalingIndex(value: string) {
    this.set("cycleOfScalingIndex", Value.fromString(value));
  }

  get cycleOfFee(): string {
    let value = this.get("cycleOfFee");
    return value.toString();
  }

  set cycleOfFee(value: string) {
    this.set("cycleOfFee", Value.fromString(value));
  }

  get cycleOfPrincipalRedemption(): string {
    let value = this.get("cycleOfPrincipalRedemption");
    return value.toString();
  }

  set cycleOfPrincipalRedemption(value: string) {
    this.set("cycleOfPrincipalRedemption", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }
}

export class CECTerms extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CECTerms entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CECTerms entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CECTerms", id.toString(), this);
  }

  static load(id: string): CECTerms | null {
    return store.get("CECTerms", id) as CECTerms | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractType(): i32 {
    let value = this.get("contractType");
    return value.toI32();
  }

  set contractType(value: i32) {
    this.set("contractType", Value.fromI32(value));
  }

  get calendar(): i32 {
    let value = this.get("calendar");
    return value.toI32();
  }

  set calendar(value: i32) {
    this.set("calendar", Value.fromI32(value));
  }

  get contractRole(): i32 {
    let value = this.get("contractRole");
    return value.toI32();
  }

  set contractRole(value: i32) {
    this.set("contractRole", Value.fromI32(value));
  }

  get dayCountConvention(): i32 {
    let value = this.get("dayCountConvention");
    return value.toI32();
  }

  set dayCountConvention(value: i32) {
    this.set("dayCountConvention", Value.fromI32(value));
  }

  get businessDayConvention(): i32 {
    let value = this.get("businessDayConvention");
    return value.toI32();
  }

  set businessDayConvention(value: i32) {
    this.set("businessDayConvention", Value.fromI32(value));
  }

  get endOfMonthConvention(): i32 {
    let value = this.get("endOfMonthConvention");
    return value.toI32();
  }

  set endOfMonthConvention(value: i32) {
    this.set("endOfMonthConvention", Value.fromI32(value));
  }

  get creditEventTypeCovered(): i32 {
    let value = this.get("creditEventTypeCovered");
    return value.toI32();
  }

  set creditEventTypeCovered(value: i32) {
    this.set("creditEventTypeCovered", Value.fromI32(value));
  }

  get feeBasis(): i32 {
    let value = this.get("feeBasis");
    return value.toI32();
  }

  set feeBasis(value: i32) {
    this.set("feeBasis", Value.fromI32(value));
  }

  get statusDate(): BigInt {
    let value = this.get("statusDate");
    return value.toBigInt();
  }

  set statusDate(value: BigInt) {
    this.set("statusDate", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    return value.toBigInt();
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get notionalPrincipal(): BigInt {
    let value = this.get("notionalPrincipal");
    return value.toBigInt();
  }

  set notionalPrincipal(value: BigInt) {
    this.set("notionalPrincipal", Value.fromBigInt(value));
  }

  get feeRate(): BigInt {
    let value = this.get("feeRate");
    return value.toBigInt();
  }

  set feeRate(value: BigInt) {
    this.set("feeRate", Value.fromBigInt(value));
  }

  get coverageOfCreditEnhancement(): BigInt {
    let value = this.get("coverageOfCreditEnhancement");
    return value.toBigInt();
  }

  set coverageOfCreditEnhancement(value: BigInt) {
    this.set("coverageOfCreditEnhancement", Value.fromBigInt(value));
  }

  get contractReference_1(): string {
    let value = this.get("contractReference_1");
    return value.toString();
  }

  set contractReference_1(value: string) {
    this.set("contractReference_1", Value.fromString(value));
  }

  get contractReference_2(): string {
    let value = this.get("contractReference_2");
    return value.toString();
  }

  set contractReference_2(value: string) {
    this.set("contractReference_2", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }
}

export class CEGTerms extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CEGTerms entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CEGTerms entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CEGTerms", id.toString(), this);
  }

  static load(id: string): CEGTerms | null {
    return store.get("CEGTerms", id) as CEGTerms | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractType(): i32 {
    let value = this.get("contractType");
    return value.toI32();
  }

  set contractType(value: i32) {
    this.set("contractType", Value.fromI32(value));
  }

  get calendar(): i32 {
    let value = this.get("calendar");
    return value.toI32();
  }

  set calendar(value: i32) {
    this.set("calendar", Value.fromI32(value));
  }

  get contractRole(): i32 {
    let value = this.get("contractRole");
    return value.toI32();
  }

  set contractRole(value: i32) {
    this.set("contractRole", Value.fromI32(value));
  }

  get dayCountConvention(): i32 {
    let value = this.get("dayCountConvention");
    return value.toI32();
  }

  set dayCountConvention(value: i32) {
    this.set("dayCountConvention", Value.fromI32(value));
  }

  get businessDayConvention(): i32 {
    let value = this.get("businessDayConvention");
    return value.toI32();
  }

  set businessDayConvention(value: i32) {
    this.set("businessDayConvention", Value.fromI32(value));
  }

  get endOfMonthConvention(): i32 {
    let value = this.get("endOfMonthConvention");
    return value.toI32();
  }

  set endOfMonthConvention(value: i32) {
    this.set("endOfMonthConvention", Value.fromI32(value));
  }

  get feeBasis(): i32 {
    let value = this.get("feeBasis");
    return value.toI32();
  }

  set feeBasis(value: i32) {
    this.set("feeBasis", Value.fromI32(value));
  }

  get creditEventTypeCovered(): i32 {
    let value = this.get("creditEventTypeCovered");
    return value.toI32();
  }

  set creditEventTypeCovered(value: i32) {
    this.set("creditEventTypeCovered", Value.fromI32(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get settlementCurrency(): Bytes {
    let value = this.get("settlementCurrency");
    return value.toBytes();
  }

  set settlementCurrency(value: Bytes) {
    this.set("settlementCurrency", Value.fromBytes(value));
  }

  get contractDealDate(): BigInt {
    let value = this.get("contractDealDate");
    return value.toBigInt();
  }

  set contractDealDate(value: BigInt) {
    this.set("contractDealDate", Value.fromBigInt(value));
  }

  get statusDate(): BigInt {
    let value = this.get("statusDate");
    return value.toBigInt();
  }

  set statusDate(value: BigInt) {
    this.set("statusDate", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    return value.toBigInt();
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get purchaseDate(): BigInt {
    let value = this.get("purchaseDate");
    return value.toBigInt();
  }

  set purchaseDate(value: BigInt) {
    this.set("purchaseDate", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfFee(): BigInt {
    let value = this.get("cycleAnchorDateOfFee");
    return value.toBigInt();
  }

  set cycleAnchorDateOfFee(value: BigInt) {
    this.set("cycleAnchorDateOfFee", Value.fromBigInt(value));
  }

  get notionalPrincipal(): BigInt {
    let value = this.get("notionalPrincipal");
    return value.toBigInt();
  }

  set notionalPrincipal(value: BigInt) {
    this.set("notionalPrincipal", Value.fromBigInt(value));
  }

  get delinquencyRate(): BigInt {
    let value = this.get("delinquencyRate");
    return value.toBigInt();
  }

  set delinquencyRate(value: BigInt) {
    this.set("delinquencyRate", Value.fromBigInt(value));
  }

  get feeAccrued(): BigInt {
    let value = this.get("feeAccrued");
    return value.toBigInt();
  }

  set feeAccrued(value: BigInt) {
    this.set("feeAccrued", Value.fromBigInt(value));
  }

  get feeRate(): BigInt {
    let value = this.get("feeRate");
    return value.toBigInt();
  }

  set feeRate(value: BigInt) {
    this.set("feeRate", Value.fromBigInt(value));
  }

  get priceAtPurchaseDate(): BigInt {
    let value = this.get("priceAtPurchaseDate");
    return value.toBigInt();
  }

  set priceAtPurchaseDate(value: BigInt) {
    this.set("priceAtPurchaseDate", Value.fromBigInt(value));
  }

  get coverageOfCreditEnhancement(): BigInt {
    let value = this.get("coverageOfCreditEnhancement");
    return value.toBigInt();
  }

  set coverageOfCreditEnhancement(value: BigInt) {
    this.set("coverageOfCreditEnhancement", Value.fromBigInt(value));
  }

  get gracePeriod(): string {
    let value = this.get("gracePeriod");
    return value.toString();
  }

  set gracePeriod(value: string) {
    this.set("gracePeriod", Value.fromString(value));
  }

  get delinquencyPeriod(): string {
    let value = this.get("delinquencyPeriod");
    return value.toString();
  }

  set delinquencyPeriod(value: string) {
    this.set("delinquencyPeriod", Value.fromString(value));
  }

  get cycleOfFee(): string {
    let value = this.get("cycleOfFee");
    return value.toString();
  }

  set cycleOfFee(value: string) {
    this.set("cycleOfFee", Value.fromString(value));
  }

  get contractReference_1(): string {
    let value = this.get("contractReference_1");
    return value.toString();
  }

  set contractReference_1(value: string) {
    this.set("contractReference_1", Value.fromString(value));
  }

  get contractReference_2(): string {
    let value = this.get("contractReference_2");
    return value.toString();
  }

  set contractReference_2(value: string) {
    this.set("contractReference_2", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }
}

export class CERTFTerms extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CERTFTerms entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CERTFTerms entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CERTFTerms", id.toString(), this);
  }

  static load(id: string): CERTFTerms | null {
    return store.get("CERTFTerms", id) as CERTFTerms | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractType(): i32 {
    let value = this.get("contractType");
    return value.toI32();
  }

  set contractType(value: i32) {
    this.set("contractType", Value.fromI32(value));
  }

  get calendar(): i32 {
    let value = this.get("calendar");
    return value.toI32();
  }

  set calendar(value: i32) {
    this.set("calendar", Value.fromI32(value));
  }

  get contractRole(): i32 {
    let value = this.get("contractRole");
    return value.toI32();
  }

  set contractRole(value: i32) {
    this.set("contractRole", Value.fromI32(value));
  }

  get dayCountConvention(): i32 {
    let value = this.get("dayCountConvention");
    return value.toI32();
  }

  set dayCountConvention(value: i32) {
    this.set("dayCountConvention", Value.fromI32(value));
  }

  get businessDayConvention(): i32 {
    let value = this.get("businessDayConvention");
    return value.toI32();
  }

  set businessDayConvention(value: i32) {
    this.set("businessDayConvention", Value.fromI32(value));
  }

  get endOfMonthConvention(): i32 {
    let value = this.get("endOfMonthConvention");
    return value.toI32();
  }

  set endOfMonthConvention(value: i32) {
    this.set("endOfMonthConvention", Value.fromI32(value));
  }

  get couponType(): i32 {
    let value = this.get("couponType");
    return value.toI32();
  }

  set couponType(value: i32) {
    this.set("couponType", Value.fromI32(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get settlementCurrency(): Bytes {
    let value = this.get("settlementCurrency");
    return value.toBytes();
  }

  set settlementCurrency(value: Bytes) {
    this.set("settlementCurrency", Value.fromBytes(value));
  }

  get contractDealDate(): BigInt {
    let value = this.get("contractDealDate");
    return value.toBigInt();
  }

  set contractDealDate(value: BigInt) {
    this.set("contractDealDate", Value.fromBigInt(value));
  }

  get statusDate(): BigInt {
    let value = this.get("statusDate");
    return value.toBigInt();
  }

  set statusDate(value: BigInt) {
    this.set("statusDate", Value.fromBigInt(value));
  }

  get initialExchangeDate(): BigInt {
    let value = this.get("initialExchangeDate");
    return value.toBigInt();
  }

  set initialExchangeDate(value: BigInt) {
    this.set("initialExchangeDate", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    return value.toBigInt();
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get issueDate(): BigInt {
    let value = this.get("issueDate");
    return value.toBigInt();
  }

  set issueDate(value: BigInt) {
    this.set("issueDate", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfRedemption(): BigInt {
    let value = this.get("cycleAnchorDateOfRedemption");
    return value.toBigInt();
  }

  set cycleAnchorDateOfRedemption(value: BigInt) {
    this.set("cycleAnchorDateOfRedemption", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfTermination(): BigInt {
    let value = this.get("cycleAnchorDateOfTermination");
    return value.toBigInt();
  }

  set cycleAnchorDateOfTermination(value: BigInt) {
    this.set("cycleAnchorDateOfTermination", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfCoupon(): BigInt {
    let value = this.get("cycleAnchorDateOfCoupon");
    return value.toBigInt();
  }

  set cycleAnchorDateOfCoupon(value: BigInt) {
    this.set("cycleAnchorDateOfCoupon", Value.fromBigInt(value));
  }

  get nominalPrice(): BigInt {
    let value = this.get("nominalPrice");
    return value.toBigInt();
  }

  set nominalPrice(value: BigInt) {
    this.set("nominalPrice", Value.fromBigInt(value));
  }

  get issuePrice(): BigInt {
    let value = this.get("issuePrice");
    return value.toBigInt();
  }

  set issuePrice(value: BigInt) {
    this.set("issuePrice", Value.fromBigInt(value));
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    return value.toBigInt();
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }

  get denominationRatio(): BigInt {
    let value = this.get("denominationRatio");
    return value.toBigInt();
  }

  set denominationRatio(value: BigInt) {
    this.set("denominationRatio", Value.fromBigInt(value));
  }

  get couponRate(): BigInt {
    let value = this.get("couponRate");
    return value.toBigInt();
  }

  set couponRate(value: BigInt) {
    this.set("couponRate", Value.fromBigInt(value));
  }

  get gracePeriod(): string {
    let value = this.get("gracePeriod");
    return value.toString();
  }

  set gracePeriod(value: string) {
    this.set("gracePeriod", Value.fromString(value));
  }

  get delinquencyPeriod(): string {
    let value = this.get("delinquencyPeriod");
    return value.toString();
  }

  set delinquencyPeriod(value: string) {
    this.set("delinquencyPeriod", Value.fromString(value));
  }

  get settlementPeriod(): string {
    let value = this.get("settlementPeriod");
    return value.toString();
  }

  set settlementPeriod(value: string) {
    this.set("settlementPeriod", Value.fromString(value));
  }

  get fixingPeriod(): string {
    let value = this.get("fixingPeriod");
    return value.toString();
  }

  set fixingPeriod(value: string) {
    this.set("fixingPeriod", Value.fromString(value));
  }

  get redemptionExercisePeriod(): string {
    let value = this.get("redemptionExercisePeriod");
    return value.toString();
  }

  set redemptionExercisePeriod(value: string) {
    this.set("redemptionExercisePeriod", Value.fromString(value));
  }

  get cycleOfRedemption(): string {
    let value = this.get("cycleOfRedemption");
    return value.toString();
  }

  set cycleOfRedemption(value: string) {
    this.set("cycleOfRedemption", Value.fromString(value));
  }

  get cycleOfTermination(): string {
    let value = this.get("cycleOfTermination");
    return value.toString();
  }

  set cycleOfTermination(value: string) {
    this.set("cycleOfTermination", Value.fromString(value));
  }

  get cycleOfCoupon(): string {
    let value = this.get("cycleOfCoupon");
    return value.toString();
  }

  set cycleOfCoupon(value: string) {
    this.set("cycleOfCoupon", Value.fromString(value));
  }

  get contractReference_1(): string {
    let value = this.get("contractReference_1");
    return value.toString();
  }

  set contractReference_1(value: string) {
    this.set("contractReference_1", Value.fromString(value));
  }

  get contractReference_2(): string {
    let value = this.get("contractReference_2");
    return value.toString();
  }

  set contractReference_2(value: string) {
    this.set("contractReference_2", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }
}

export class PAMTerms extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PAMTerms entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PAMTerms entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PAMTerms", id.toString(), this);
  }

  static load(id: string): PAMTerms | null {
    return store.get("PAMTerms", id) as PAMTerms | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractType(): i32 {
    let value = this.get("contractType");
    return value.toI32();
  }

  set contractType(value: i32) {
    this.set("contractType", Value.fromI32(value));
  }

  get calendar(): i32 {
    let value = this.get("calendar");
    return value.toI32();
  }

  set calendar(value: i32) {
    this.set("calendar", Value.fromI32(value));
  }

  get contractRole(): i32 {
    let value = this.get("contractRole");
    return value.toI32();
  }

  set contractRole(value: i32) {
    this.set("contractRole", Value.fromI32(value));
  }

  get dayCountConvention(): i32 {
    let value = this.get("dayCountConvention");
    return value.toI32();
  }

  set dayCountConvention(value: i32) {
    this.set("dayCountConvention", Value.fromI32(value));
  }

  get businessDayConvention(): i32 {
    let value = this.get("businessDayConvention");
    return value.toI32();
  }

  set businessDayConvention(value: i32) {
    this.set("businessDayConvention", Value.fromI32(value));
  }

  get endOfMonthConvention(): i32 {
    let value = this.get("endOfMonthConvention");
    return value.toI32();
  }

  set endOfMonthConvention(value: i32) {
    this.set("endOfMonthConvention", Value.fromI32(value));
  }

  get scalingEffect(): i32 {
    let value = this.get("scalingEffect");
    return value.toI32();
  }

  set scalingEffect(value: i32) {
    this.set("scalingEffect", Value.fromI32(value));
  }

  get penaltyType(): i32 {
    let value = this.get("penaltyType");
    return value.toI32();
  }

  set penaltyType(value: i32) {
    this.set("penaltyType", Value.fromI32(value));
  }

  get feeBasis(): i32 {
    let value = this.get("feeBasis");
    return value.toI32();
  }

  set feeBasis(value: i32) {
    this.set("feeBasis", Value.fromI32(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get settlementCurrency(): Bytes {
    let value = this.get("settlementCurrency");
    return value.toBytes();
  }

  set settlementCurrency(value: Bytes) {
    this.set("settlementCurrency", Value.fromBytes(value));
  }

  get marketObjectCodeRateReset(): Bytes {
    let value = this.get("marketObjectCodeRateReset");
    return value.toBytes();
  }

  set marketObjectCodeRateReset(value: Bytes) {
    this.set("marketObjectCodeRateReset", Value.fromBytes(value));
  }

  get contractDealDate(): BigInt {
    let value = this.get("contractDealDate");
    return value.toBigInt();
  }

  set contractDealDate(value: BigInt) {
    this.set("contractDealDate", Value.fromBigInt(value));
  }

  get statusDate(): BigInt {
    let value = this.get("statusDate");
    return value.toBigInt();
  }

  set statusDate(value: BigInt) {
    this.set("statusDate", Value.fromBigInt(value));
  }

  get initialExchangeDate(): BigInt {
    let value = this.get("initialExchangeDate");
    return value.toBigInt();
  }

  set initialExchangeDate(value: BigInt) {
    this.set("initialExchangeDate", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    return value.toBigInt();
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get purchaseDate(): BigInt {
    let value = this.get("purchaseDate");
    return value.toBigInt();
  }

  set purchaseDate(value: BigInt) {
    this.set("purchaseDate", Value.fromBigInt(value));
  }

  get capitalizationEndDate(): BigInt {
    let value = this.get("capitalizationEndDate");
    return value.toBigInt();
  }

  set capitalizationEndDate(value: BigInt) {
    this.set("capitalizationEndDate", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfInterestPayment(): BigInt {
    let value = this.get("cycleAnchorDateOfInterestPayment");
    return value.toBigInt();
  }

  set cycleAnchorDateOfInterestPayment(value: BigInt) {
    this.set("cycleAnchorDateOfInterestPayment", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfRateReset(): BigInt {
    let value = this.get("cycleAnchorDateOfRateReset");
    return value.toBigInt();
  }

  set cycleAnchorDateOfRateReset(value: BigInt) {
    this.set("cycleAnchorDateOfRateReset", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfScalingIndex(): BigInt {
    let value = this.get("cycleAnchorDateOfScalingIndex");
    return value.toBigInt();
  }

  set cycleAnchorDateOfScalingIndex(value: BigInt) {
    this.set("cycleAnchorDateOfScalingIndex", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfFee(): BigInt {
    let value = this.get("cycleAnchorDateOfFee");
    return value.toBigInt();
  }

  set cycleAnchorDateOfFee(value: BigInt) {
    this.set("cycleAnchorDateOfFee", Value.fromBigInt(value));
  }

  get notionalPrincipal(): BigInt {
    let value = this.get("notionalPrincipal");
    return value.toBigInt();
  }

  set notionalPrincipal(value: BigInt) {
    this.set("notionalPrincipal", Value.fromBigInt(value));
  }

  get nominalInterestRate(): BigInt {
    let value = this.get("nominalInterestRate");
    return value.toBigInt();
  }

  set nominalInterestRate(value: BigInt) {
    this.set("nominalInterestRate", Value.fromBigInt(value));
  }

  get accruedInterest(): BigInt {
    let value = this.get("accruedInterest");
    return value.toBigInt();
  }

  set accruedInterest(value: BigInt) {
    this.set("accruedInterest", Value.fromBigInt(value));
  }

  get rateMultiplier(): BigInt {
    let value = this.get("rateMultiplier");
    return value.toBigInt();
  }

  set rateMultiplier(value: BigInt) {
    this.set("rateMultiplier", Value.fromBigInt(value));
  }

  get rateSpread(): BigInt {
    let value = this.get("rateSpread");
    return value.toBigInt();
  }

  set rateSpread(value: BigInt) {
    this.set("rateSpread", Value.fromBigInt(value));
  }

  get nextResetRate(): BigInt {
    let value = this.get("nextResetRate");
    return value.toBigInt();
  }

  set nextResetRate(value: BigInt) {
    this.set("nextResetRate", Value.fromBigInt(value));
  }

  get feeRate(): BigInt {
    let value = this.get("feeRate");
    return value.toBigInt();
  }

  set feeRate(value: BigInt) {
    this.set("feeRate", Value.fromBigInt(value));
  }

  get feeAccrued(): BigInt {
    let value = this.get("feeAccrued");
    return value.toBigInt();
  }

  set feeAccrued(value: BigInt) {
    this.set("feeAccrued", Value.fromBigInt(value));
  }

  get penaltyRate(): BigInt {
    let value = this.get("penaltyRate");
    return value.toBigInt();
  }

  set penaltyRate(value: BigInt) {
    this.set("penaltyRate", Value.fromBigInt(value));
  }

  get delinquencyRate(): BigInt {
    let value = this.get("delinquencyRate");
    return value.toBigInt();
  }

  set delinquencyRate(value: BigInt) {
    this.set("delinquencyRate", Value.fromBigInt(value));
  }

  get premiumDiscountAtIED(): BigInt {
    let value = this.get("premiumDiscountAtIED");
    return value.toBigInt();
  }

  set premiumDiscountAtIED(value: BigInt) {
    this.set("premiumDiscountAtIED", Value.fromBigInt(value));
  }

  get priceAtPurchaseDate(): BigInt {
    let value = this.get("priceAtPurchaseDate");
    return value.toBigInt();
  }

  set priceAtPurchaseDate(value: BigInt) {
    this.set("priceAtPurchaseDate", Value.fromBigInt(value));
  }

  get lifeCap(): BigInt {
    let value = this.get("lifeCap");
    return value.toBigInt();
  }

  set lifeCap(value: BigInt) {
    this.set("lifeCap", Value.fromBigInt(value));
  }

  get lifeFloor(): BigInt {
    let value = this.get("lifeFloor");
    return value.toBigInt();
  }

  set lifeFloor(value: BigInt) {
    this.set("lifeFloor", Value.fromBigInt(value));
  }

  get periodCap(): BigInt {
    let value = this.get("periodCap");
    return value.toBigInt();
  }

  set periodCap(value: BigInt) {
    this.set("periodCap", Value.fromBigInt(value));
  }

  get periodFloor(): BigInt {
    let value = this.get("periodFloor");
    return value.toBigInt();
  }

  set periodFloor(value: BigInt) {
    this.set("periodFloor", Value.fromBigInt(value));
  }

  get gracePeriod(): string {
    let value = this.get("gracePeriod");
    return value.toString();
  }

  set gracePeriod(value: string) {
    this.set("gracePeriod", Value.fromString(value));
  }

  get delinquencyPeriod(): string {
    let value = this.get("delinquencyPeriod");
    return value.toString();
  }

  set delinquencyPeriod(value: string) {
    this.set("delinquencyPeriod", Value.fromString(value));
  }

  get cycleOfInterestPayment(): string {
    let value = this.get("cycleOfInterestPayment");
    return value.toString();
  }

  set cycleOfInterestPayment(value: string) {
    this.set("cycleOfInterestPayment", Value.fromString(value));
  }

  get cycleOfRateReset(): string {
    let value = this.get("cycleOfRateReset");
    return value.toString();
  }

  set cycleOfRateReset(value: string) {
    this.set("cycleOfRateReset", Value.fromString(value));
  }

  get cycleOfScalingIndex(): string {
    let value = this.get("cycleOfScalingIndex");
    return value.toString();
  }

  set cycleOfScalingIndex(value: string) {
    this.set("cycleOfScalingIndex", Value.fromString(value));
  }

  get cycleOfFee(): string {
    let value = this.get("cycleOfFee");
    return value.toString();
  }

  set cycleOfFee(value: string) {
    this.set("cycleOfFee", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }
}

export class STKTerms extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save STKTerms entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save STKTerms entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("STKTerms", id.toString(), this);
  }

  static load(id: string): STKTerms | null {
    return store.get("STKTerms", id) as STKTerms | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractType(): i32 {
    let value = this.get("contractType");
    return value.toI32();
  }

  set contractType(value: i32) {
    this.set("contractType", Value.fromI32(value));
  }

  get calendar(): i32 {
    let value = this.get("calendar");
    return value.toI32();
  }

  set calendar(value: i32) {
    this.set("calendar", Value.fromI32(value));
  }

  get contractRole(): i32 {
    let value = this.get("contractRole");
    return value.toI32();
  }

  set contractRole(value: i32) {
    this.set("contractRole", Value.fromI32(value));
  }

  get dayCountConvention(): i32 {
    let value = this.get("dayCountConvention");
    return value.toI32();
  }

  set dayCountConvention(value: i32) {
    this.set("dayCountConvention", Value.fromI32(value));
  }

  get businessDayConvention(): i32 {
    let value = this.get("businessDayConvention");
    return value.toI32();
  }

  set businessDayConvention(value: i32) {
    this.set("businessDayConvention", Value.fromI32(value));
  }

  get endOfMonthConvention(): i32 {
    let value = this.get("endOfMonthConvention");
    return value.toI32();
  }

  set endOfMonthConvention(value: i32) {
    this.set("endOfMonthConvention", Value.fromI32(value));
  }

  get redeemableByIssuer(): i32 {
    let value = this.get("redeemableByIssuer");
    return value.toI32();
  }

  set redeemableByIssuer(value: i32) {
    this.set("redeemableByIssuer", Value.fromI32(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get settlementCurrency(): Bytes {
    let value = this.get("settlementCurrency");
    return value.toBytes();
  }

  set settlementCurrency(value: Bytes) {
    this.set("settlementCurrency", Value.fromBytes(value));
  }

  get contractDealDate(): BigInt {
    let value = this.get("contractDealDate");
    return value.toBigInt();
  }

  set contractDealDate(value: BigInt) {
    this.set("contractDealDate", Value.fromBigInt(value));
  }

  get statusDate(): BigInt {
    let value = this.get("statusDate");
    return value.toBigInt();
  }

  set statusDate(value: BigInt) {
    this.set("statusDate", Value.fromBigInt(value));
  }

  get issueDate(): BigInt {
    let value = this.get("issueDate");
    return value.toBigInt();
  }

  set issueDate(value: BigInt) {
    this.set("issueDate", Value.fromBigInt(value));
  }

  get purchaseDate(): BigInt {
    let value = this.get("purchaseDate");
    return value.toBigInt();
  }

  set purchaseDate(value: BigInt) {
    this.set("purchaseDate", Value.fromBigInt(value));
  }

  get cycleAnchorDateOfDividend(): BigInt {
    let value = this.get("cycleAnchorDateOfDividend");
    return value.toBigInt();
  }

  set cycleAnchorDateOfDividend(value: BigInt) {
    this.set("cycleAnchorDateOfDividend", Value.fromBigInt(value));
  }

  get nominalPrice(): BigInt {
    let value = this.get("nominalPrice");
    return value.toBigInt();
  }

  set nominalPrice(value: BigInt) {
    this.set("nominalPrice", Value.fromBigInt(value));
  }

  get notionalPrincipal(): BigInt {
    let value = this.get("notionalPrincipal");
    return value.toBigInt();
  }

  set notionalPrincipal(value: BigInt) {
    this.set("notionalPrincipal", Value.fromBigInt(value));
  }

  get issuePrice(): BigInt {
    let value = this.get("issuePrice");
    return value.toBigInt();
  }

  set issuePrice(value: BigInt) {
    this.set("issuePrice", Value.fromBigInt(value));
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    return value.toBigInt();
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }

  get priceAtPurchaseDate(): BigInt {
    let value = this.get("priceAtPurchaseDate");
    return value.toBigInt();
  }

  set priceAtPurchaseDate(value: BigInt) {
    this.set("priceAtPurchaseDate", Value.fromBigInt(value));
  }

  get redemptionPrice(): BigInt {
    let value = this.get("redemptionPrice");
    return value.toBigInt();
  }

  set redemptionPrice(value: BigInt) {
    this.set("redemptionPrice", Value.fromBigInt(value));
  }

  get dividendRecordPeriod(): string {
    let value = this.get("dividendRecordPeriod");
    return value.toString();
  }

  set dividendRecordPeriod(value: string) {
    this.set("dividendRecordPeriod", Value.fromString(value));
  }

  get dividendPaymentPeriod(): string {
    let value = this.get("dividendPaymentPeriod");
    return value.toString();
  }

  set dividendPaymentPeriod(value: string) {
    this.set("dividendPaymentPeriod", Value.fromString(value));
  }

  get splitSettlementPeriod(): string {
    let value = this.get("splitSettlementPeriod");
    return value.toString();
  }

  set splitSettlementPeriod(value: string) {
    this.set("splitSettlementPeriod", Value.fromString(value));
  }

  get redemptionRecordPeriod(): string {
    let value = this.get("redemptionRecordPeriod");
    return value.toString();
  }

  set redemptionRecordPeriod(value: string) {
    this.set("redemptionRecordPeriod", Value.fromString(value));
  }

  get redemptionPaymentPeriod(): string {
    let value = this.get("redemptionPaymentPeriod");
    return value.toString();
  }

  set redemptionPaymentPeriod(value: string) {
    this.set("redemptionPaymentPeriod", Value.fromString(value));
  }

  get cycleOfDividend(): string {
    let value = this.get("cycleOfDividend");
    return value.toString();
  }

  set cycleOfDividend(value: string) {
    this.set("cycleOfDividend", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }
}

export class ANNAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ANNAsset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ANNAsset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ANNAsset", id.toString(), this);
  }

  static load(id: string): ANNAsset | null {
    return store.get("ANNAsset", id) as ANNAsset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetId(): Bytes {
    let value = this.get("assetId");
    return value.toBytes();
  }

  set assetId(value: Bytes) {
    this.set("assetId", Value.fromBytes(value));
  }

  get terms(): string {
    let value = this.get("terms");
    return value.toString();
  }

  set terms(value: string) {
    this.set("terms", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get schedule(): string {
    let value = this.get("schedule");
    return value.toString();
  }

  set schedule(value: string) {
    this.set("schedule", Value.fromString(value));
  }

  get ownership(): string {
    let value = this.get("ownership");
    return value.toString();
  }

  set ownership(value: string) {
    this.set("ownership", Value.fromString(value));
  }

  get engine(): Bytes {
    let value = this.get("engine");
    return value.toBytes();
  }

  set engine(value: Bytes) {
    this.set("engine", Value.fromBytes(value));
  }

  get actor(): Bytes {
    let value = this.get("actor");
    return value.toBytes();
  }

  set actor(value: Bytes) {
    this.set("actor", Value.fromBytes(value));
  }

  get registry(): Bytes {
    let value = this.get("registry");
    return value.toBytes();
  }

  set registry(value: Bytes) {
    this.set("registry", Value.fromBytes(value));
  }

  get admins(): string {
    let value = this.get("admins");
    return value.toString();
  }

  set admins(value: string) {
    this.set("admins", Value.fromString(value));
  }

  get createdOn(): BigInt {
    let value = this.get("createdOn");
    return value.toBigInt();
  }

  set createdOn(value: BigInt) {
    this.set("createdOn", Value.fromBigInt(value));
  }
}

export class CECAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CECAsset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CECAsset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CECAsset", id.toString(), this);
  }

  static load(id: string): CECAsset | null {
    return store.get("CECAsset", id) as CECAsset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetId(): Bytes {
    let value = this.get("assetId");
    return value.toBytes();
  }

  set assetId(value: Bytes) {
    this.set("assetId", Value.fromBytes(value));
  }

  get terms(): string {
    let value = this.get("terms");
    return value.toString();
  }

  set terms(value: string) {
    this.set("terms", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get schedule(): string {
    let value = this.get("schedule");
    return value.toString();
  }

  set schedule(value: string) {
    this.set("schedule", Value.fromString(value));
  }

  get ownership(): string {
    let value = this.get("ownership");
    return value.toString();
  }

  set ownership(value: string) {
    this.set("ownership", Value.fromString(value));
  }

  get engine(): Bytes {
    let value = this.get("engine");
    return value.toBytes();
  }

  set engine(value: Bytes) {
    this.set("engine", Value.fromBytes(value));
  }

  get actor(): Bytes {
    let value = this.get("actor");
    return value.toBytes();
  }

  set actor(value: Bytes) {
    this.set("actor", Value.fromBytes(value));
  }

  get registry(): Bytes {
    let value = this.get("registry");
    return value.toBytes();
  }

  set registry(value: Bytes) {
    this.set("registry", Value.fromBytes(value));
  }

  get admins(): string {
    let value = this.get("admins");
    return value.toString();
  }

  set admins(value: string) {
    this.set("admins", Value.fromString(value));
  }

  get createdOn(): BigInt {
    let value = this.get("createdOn");
    return value.toBigInt();
  }

  set createdOn(value: BigInt) {
    this.set("createdOn", Value.fromBigInt(value));
  }
}

export class CEGAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CEGAsset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CEGAsset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CEGAsset", id.toString(), this);
  }

  static load(id: string): CEGAsset | null {
    return store.get("CEGAsset", id) as CEGAsset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetId(): Bytes {
    let value = this.get("assetId");
    return value.toBytes();
  }

  set assetId(value: Bytes) {
    this.set("assetId", Value.fromBytes(value));
  }

  get terms(): string {
    let value = this.get("terms");
    return value.toString();
  }

  set terms(value: string) {
    this.set("terms", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get schedule(): string {
    let value = this.get("schedule");
    return value.toString();
  }

  set schedule(value: string) {
    this.set("schedule", Value.fromString(value));
  }

  get ownership(): string {
    let value = this.get("ownership");
    return value.toString();
  }

  set ownership(value: string) {
    this.set("ownership", Value.fromString(value));
  }

  get engine(): Bytes {
    let value = this.get("engine");
    return value.toBytes();
  }

  set engine(value: Bytes) {
    this.set("engine", Value.fromBytes(value));
  }

  get actor(): Bytes {
    let value = this.get("actor");
    return value.toBytes();
  }

  set actor(value: Bytes) {
    this.set("actor", Value.fromBytes(value));
  }

  get registry(): Bytes {
    let value = this.get("registry");
    return value.toBytes();
  }

  set registry(value: Bytes) {
    this.set("registry", Value.fromBytes(value));
  }

  get admins(): string {
    let value = this.get("admins");
    return value.toString();
  }

  set admins(value: string) {
    this.set("admins", Value.fromString(value));
  }

  get createdOn(): BigInt {
    let value = this.get("createdOn");
    return value.toBigInt();
  }

  set createdOn(value: BigInt) {
    this.set("createdOn", Value.fromBigInt(value));
  }
}

export class CERTFAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CERTFAsset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CERTFAsset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CERTFAsset", id.toString(), this);
  }

  static load(id: string): CERTFAsset | null {
    return store.get("CERTFAsset", id) as CERTFAsset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetId(): Bytes {
    let value = this.get("assetId");
    return value.toBytes();
  }

  set assetId(value: Bytes) {
    this.set("assetId", Value.fromBytes(value));
  }

  get terms(): string {
    let value = this.get("terms");
    return value.toString();
  }

  set terms(value: string) {
    this.set("terms", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get schedule(): string {
    let value = this.get("schedule");
    return value.toString();
  }

  set schedule(value: string) {
    this.set("schedule", Value.fromString(value));
  }

  get ownership(): string {
    let value = this.get("ownership");
    return value.toString();
  }

  set ownership(value: string) {
    this.set("ownership", Value.fromString(value));
  }

  get engine(): Bytes {
    let value = this.get("engine");
    return value.toBytes();
  }

  set engine(value: Bytes) {
    this.set("engine", Value.fromBytes(value));
  }

  get actor(): Bytes {
    let value = this.get("actor");
    return value.toBytes();
  }

  set actor(value: Bytes) {
    this.set("actor", Value.fromBytes(value));
  }

  get registry(): Bytes {
    let value = this.get("registry");
    return value.toBytes();
  }

  set registry(value: Bytes) {
    this.set("registry", Value.fromBytes(value));
  }

  get admins(): string {
    let value = this.get("admins");
    return value.toString();
  }

  set admins(value: string) {
    this.set("admins", Value.fromString(value));
  }

  get createdOn(): BigInt {
    let value = this.get("createdOn");
    return value.toBigInt();
  }

  set createdOn(value: BigInt) {
    this.set("createdOn", Value.fromBigInt(value));
  }
}

export class PAMAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PAMAsset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PAMAsset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PAMAsset", id.toString(), this);
  }

  static load(id: string): PAMAsset | null {
    return store.get("PAMAsset", id) as PAMAsset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetId(): Bytes {
    let value = this.get("assetId");
    return value.toBytes();
  }

  set assetId(value: Bytes) {
    this.set("assetId", Value.fromBytes(value));
  }

  get terms(): string {
    let value = this.get("terms");
    return value.toString();
  }

  set terms(value: string) {
    this.set("terms", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get schedule(): string {
    let value = this.get("schedule");
    return value.toString();
  }

  set schedule(value: string) {
    this.set("schedule", Value.fromString(value));
  }

  get ownership(): string {
    let value = this.get("ownership");
    return value.toString();
  }

  set ownership(value: string) {
    this.set("ownership", Value.fromString(value));
  }

  get engine(): Bytes {
    let value = this.get("engine");
    return value.toBytes();
  }

  set engine(value: Bytes) {
    this.set("engine", Value.fromBytes(value));
  }

  get actor(): Bytes {
    let value = this.get("actor");
    return value.toBytes();
  }

  set actor(value: Bytes) {
    this.set("actor", Value.fromBytes(value));
  }

  get registry(): Bytes {
    let value = this.get("registry");
    return value.toBytes();
  }

  set registry(value: Bytes) {
    this.set("registry", Value.fromBytes(value));
  }

  get admins(): string {
    let value = this.get("admins");
    return value.toString();
  }

  set admins(value: string) {
    this.set("admins", Value.fromString(value));
  }

  get createdOn(): BigInt {
    let value = this.get("createdOn");
    return value.toBigInt();
  }

  set createdOn(value: BigInt) {
    this.set("createdOn", Value.fromBigInt(value));
  }
}

export class STKAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save STKAsset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save STKAsset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("STKAsset", id.toString(), this);
  }

  static load(id: string): STKAsset | null {
    return store.get("STKAsset", id) as STKAsset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetId(): Bytes {
    let value = this.get("assetId");
    return value.toBytes();
  }

  set assetId(value: Bytes) {
    this.set("assetId", Value.fromBytes(value));
  }

  get terms(): string {
    let value = this.get("terms");
    return value.toString();
  }

  set terms(value: string) {
    this.set("terms", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get schedule(): string {
    let value = this.get("schedule");
    return value.toString();
  }

  set schedule(value: string) {
    this.set("schedule", Value.fromString(value));
  }

  get ownership(): string {
    let value = this.get("ownership");
    return value.toString();
  }

  set ownership(value: string) {
    this.set("ownership", Value.fromString(value));
  }

  get engine(): Bytes {
    let value = this.get("engine");
    return value.toBytes();
  }

  set engine(value: Bytes) {
    this.set("engine", Value.fromBytes(value));
  }

  get actor(): Bytes {
    let value = this.get("actor");
    return value.toBytes();
  }

  set actor(value: Bytes) {
    this.set("actor", Value.fromBytes(value));
  }

  get registry(): Bytes {
    let value = this.get("registry");
    return value.toBytes();
  }

  set registry(value: Bytes) {
    this.set("registry", Value.fromBytes(value));
  }

  get admins(): string {
    let value = this.get("admins");
    return value.toString();
  }

  set admins(value: string) {
    this.set("admins", Value.fromString(value));
  }

  get createdOn(): BigInt {
    let value = this.get("createdOn");
    return value.toBigInt();
  }

  set createdOn(value: BigInt) {
    this.set("createdOn", Value.fromBigInt(value));
  }
}

export class DvPSettlementData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DvPSettlementData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DvPSettlementData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DvPSettlementData", id.toString(), this);
  }

  static load(id: string): DvPSettlementData | null {
    return store.get("DvPSettlementData", id) as DvPSettlementData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get settlementId(): BigInt {
    let value = this.get("settlementId");
    return value.toBigInt();
  }

  set settlementId(value: BigInt) {
    this.set("settlementId", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get creatorToken(): Bytes {
    let value = this.get("creatorToken");
    return value.toBytes();
  }

  set creatorToken(value: Bytes) {
    this.set("creatorToken", Value.fromBytes(value));
  }

  get creatorAmount(): BigInt {
    let value = this.get("creatorAmount");
    return value.toBigInt();
  }

  set creatorAmount(value: BigInt) {
    this.set("creatorAmount", Value.fromBigInt(value));
  }

  get creatorBeneficiary(): Bytes {
    let value = this.get("creatorBeneficiary");
    return value.toBytes();
  }

  set creatorBeneficiary(value: Bytes) {
    this.set("creatorBeneficiary", Value.fromBytes(value));
  }

  get counterparty(): Bytes {
    let value = this.get("counterparty");
    return value.toBytes();
  }

  set counterparty(value: Bytes) {
    this.set("counterparty", Value.fromBytes(value));
  }

  get counterpartyToken(): Bytes {
    let value = this.get("counterpartyToken");
    return value.toBytes();
  }

  set counterpartyToken(value: Bytes) {
    this.set("counterpartyToken", Value.fromBytes(value));
  }

  get counterpartyAmount(): BigInt {
    let value = this.get("counterpartyAmount");
    return value.toBigInt();
  }

  set counterpartyAmount(value: BigInt) {
    this.set("counterpartyAmount", Value.fromBigInt(value));
  }

  get expirationDate(): BigInt {
    let value = this.get("expirationDate");
    return value.toBigInt();
  }

  set expirationDate(value: BigInt) {
    this.set("expirationDate", Value.fromBigInt(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}
