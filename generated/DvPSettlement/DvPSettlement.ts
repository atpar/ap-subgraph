// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class SettlementExecuted extends EthereumEvent {
  get params(): SettlementExecuted__Params {
    return new SettlementExecuted__Params(this);
  }
}

export class SettlementExecuted__Params {
  _event: SettlementExecuted;

  constructor(event: SettlementExecuted) {
    this._event = event;
  }

  get settlementId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get executor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SettlementExpired extends EthereumEvent {
  get params(): SettlementExpired__Params {
    return new SettlementExpired__Params(this);
  }
}

export class SettlementExpired__Params {
  _event: SettlementExpired;

  constructor(event: SettlementExpired) {
    this._event = event;
  }

  get settlementId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SettlementInitialized extends EthereumEvent {
  get params(): SettlementInitialized__Params {
    return new SettlementInitialized__Params(this);
  }
}

export class SettlementInitialized__Params {
  _event: SettlementInitialized;

  constructor(event: SettlementInitialized) {
    this._event = event;
  }

  get settlementId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get settlement(): SettlementInitializedSettlementStruct {
    return this._event.parameters[1].value.toTuple() as SettlementInitializedSettlementStruct;
  }
}

export class SettlementInitializedSettlementStruct extends EthereumTuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get creatorToken(): Address {
    return this[1].toAddress();
  }

  get creatorAmount(): BigInt {
    return this[2].toBigInt();
  }

  get creatorBeneficiary(): Address {
    return this[3].toAddress();
  }

  get counterparty(): Address {
    return this[4].toAddress();
  }

  get counterpartyToken(): Address {
    return this[5].toAddress();
  }

  get counterpartyAmount(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get status(): i32 {
    return this[8].toI32();
  }
}

export class DvPSettlement__settlementsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    map.set("value4", EthereumValue.fromAddress(this.value4));
    map.set("value5", EthereumValue.fromAddress(this.value5));
    map.set("value6", EthereumValue.fromUnsignedBigInt(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    map.set(
      "value8",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    return map;
  }
}

export class DvPSettlement extends SmartContract {
  static bind(address: Address): DvPSettlement {
    return new DvPSettlement("DvPSettlement", address);
  }

  settlements(param0: BigInt): DvPSettlement__settlementsResult {
    let result = super.call("settlements", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new DvPSettlement__settlementsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toI32()
    );
  }

  try_settlements(
    param0: BigInt
  ): CallResult<DvPSettlement__settlementsResult> {
    let result = super.tryCall("settlements", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new DvPSettlement__settlementsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toI32()
      )
    );
  }
}

export class CreateSettlementCall extends EthereumCall {
  get inputs(): CreateSettlementCall__Inputs {
    return new CreateSettlementCall__Inputs(this);
  }

  get outputs(): CreateSettlementCall__Outputs {
    return new CreateSettlementCall__Outputs(this);
  }
}

export class CreateSettlementCall__Inputs {
  _call: CreateSettlementCall;

  constructor(call: CreateSettlementCall) {
    this._call = call;
  }

  get creatorToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get creatorAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get creatorBeneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get counterparty(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get counterpartyToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get counterpartyAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get expirationDate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateSettlementCall__Outputs {
  _call: CreateSettlementCall;

  constructor(call: CreateSettlementCall) {
    this._call = call;
  }
}

export class ExecuteSettlementCall extends EthereumCall {
  get inputs(): ExecuteSettlementCall__Inputs {
    return new ExecuteSettlementCall__Inputs(this);
  }

  get outputs(): ExecuteSettlementCall__Outputs {
    return new ExecuteSettlementCall__Outputs(this);
  }
}

export class ExecuteSettlementCall__Inputs {
  _call: ExecuteSettlementCall;

  constructor(call: ExecuteSettlementCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteSettlementCall__Outputs {
  _call: ExecuteSettlementCall;

  constructor(call: ExecuteSettlementCall) {
    this._call = call;
  }
}

export class ExpireSettlementCall extends EthereumCall {
  get inputs(): ExpireSettlementCall__Inputs {
    return new ExpireSettlementCall__Inputs(this);
  }

  get outputs(): ExpireSettlementCall__Outputs {
    return new ExpireSettlementCall__Outputs(this);
  }
}

export class ExpireSettlementCall__Inputs {
  _call: ExpireSettlementCall;

  constructor(call: ExpireSettlementCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExpireSettlementCall__Outputs {
  _call: ExpireSettlementCall;

  constructor(call: ExpireSettlementCall) {
    this._call = call;
  }
}
