// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AssetProgressed extends EthereumEvent {
  get params(): AssetProgressed__Params {
    return new AssetProgressed__Params(this);
  }
}

export class AssetProgressed__Params {
  _event: AssetProgressed;

  constructor(event: AssetProgressed) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get eventId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DemoAssetActor__initializeInputOwnershipStruct extends EthereumTuple {
  get recordCreatorObligor(): Address {
    return this[0].toAddress();
  }

  get recordCreatorBeneficiary(): Address {
    return this[1].toAddress();
  }

  get counterpartyObligor(): Address {
    return this[2].toAddress();
  }

  get counterpartyBeneficiary(): Address {
    return this[3].toAddress();
  }
}

export class DemoAssetActor__initializeInputTermsStruct extends EthereumTuple {
  get contractType(): i32 {
    return this[0].toI32();
  }

  get calendar(): i32 {
    return this[1].toI32();
  }

  get contractRole(): i32 {
    return this[2].toI32();
  }

  get creatorID(): Bytes {
    return this[3].toBytes();
  }

  get counterpartyID(): Bytes {
    return this[4].toBytes();
  }

  get dayCountConvention(): i32 {
    return this[5].toI32();
  }

  get businessDayConvention(): i32 {
    return this[6].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[7].toI32();
  }

  get currency(): Address {
    return this[8].toAddress();
  }

  get scalingEffect(): i32 {
    return this[9].toI32();
  }

  get penaltyType(): i32 {
    return this[10].toI32();
  }

  get feeBasis(): i32 {
    return this[11].toI32();
  }

  get contractDealDate(): BigInt {
    return this[12].toBigInt();
  }

  get statusDate(): BigInt {
    return this[13].toBigInt();
  }

  get initialExchangeDate(): BigInt {
    return this[14].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[15].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[16].toBigInt();
  }

  get purchaseDate(): BigInt {
    return this[17].toBigInt();
  }

  get capitalizationEndDate(): BigInt {
    return this[18].toBigInt();
  }

  get cycleAnchorDateOfInterestPayment(): BigInt {
    return this[19].toBigInt();
  }

  get cycleAnchorDateOfRateReset(): BigInt {
    return this[20].toBigInt();
  }

  get cycleAnchorDateOfScalingIndex(): BigInt {
    return this[21].toBigInt();
  }

  get cycleAnchorDateOfFee(): BigInt {
    return this[22].toBigInt();
  }

  get cycleAnchorDateOfPrincipalRedemption(): BigInt {
    return this[23].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[24].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[25].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[26].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[27].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[28].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[29].toBigInt();
  }

  get feeRate(): BigInt {
    return this[30].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[31].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[32].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[33].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[34].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[35].toBigInt();
  }

  get cycleOfInterestPayment(): DemoAssetActor__initializeInputTermsCycleOfInterestPaymentStruct {
    return this[36].toTuple() as DemoAssetActor__initializeInputTermsCycleOfInterestPaymentStruct;
  }

  get cycleOfRateReset(): DemoAssetActor__initializeInputTermsCycleOfRateResetStruct {
    return this[37].toTuple() as DemoAssetActor__initializeInputTermsCycleOfRateResetStruct;
  }

  get cycleOfScalingIndex(): DemoAssetActor__initializeInputTermsCycleOfScalingIndexStruct {
    return this[38].toTuple() as DemoAssetActor__initializeInputTermsCycleOfScalingIndexStruct;
  }

  get cycleOfFee(): DemoAssetActor__initializeInputTermsCycleOfFeeStruct {
    return this[39].toTuple() as DemoAssetActor__initializeInputTermsCycleOfFeeStruct;
  }

  get cycleOfPrincipalRedemption(): DemoAssetActor__initializeInputTermsCycleOfPrincipalRedemptionStruct {
    return this[40].toTuple() as DemoAssetActor__initializeInputTermsCycleOfPrincipalRedemptionStruct;
  }

  get lifeCap(): BigInt {
    return this[41].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[42].toBigInt();
  }

  get periodCap(): BigInt {
    return this[43].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[44].toBigInt();
  }
}

export class DemoAssetActor__initializeInputTermsCycleOfInterestPaymentStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class DemoAssetActor__initializeInputTermsCycleOfRateResetStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class DemoAssetActor__initializeInputTermsCycleOfScalingIndexStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class DemoAssetActor__initializeInputTermsCycleOfFeeStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class DemoAssetActor__initializeInputTermsCycleOfPrincipalRedemptionStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class DemoAssetActor extends SmartContract {
  static bind(address: Address): DemoAssetActor {
    return new DemoAssetActor("DemoAssetActor", address);
  }

  issuers(param0: Address): boolean {
    let result = super.call("issuers", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_issuers(param0: Address): CallResult<boolean> {
    let result = super.tryCall("issuers", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): CallResult<BigInt> {
    let result = super.tryCall("PRECISION", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  progress(assetId: Bytes, timestamp: BigInt): boolean {
    let result = super.call("progress", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromUnsignedBigInt(timestamp)
    ]);

    return result[0].toBoolean();
  }

  try_progress(assetId: Bytes, timestamp: BigInt): CallResult<boolean> {
    let result = super.tryCall("progress", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromUnsignedBigInt(timestamp)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  initialize(
    assetId: Bytes,
    ownership: DemoAssetActor__initializeInputOwnershipStruct,
    terms: DemoAssetActor__initializeInputTermsStruct,
    engineAddress: Address
  ): boolean {
    let result = super.call("initialize", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromTuple(ownership),
      EthereumValue.fromTuple(terms),
      EthereumValue.fromAddress(engineAddress)
    ]);

    return result[0].toBoolean();
  }

  try_initialize(
    assetId: Bytes,
    ownership: DemoAssetActor__initializeInputOwnershipStruct,
    terms: DemoAssetActor__initializeInputTermsStruct,
    engineAddress: Address
  ): CallResult<boolean> {
    let result = super.tryCall("initialize", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromTuple(ownership),
      EthereumValue.fromTuple(terms),
      EthereumValue.fromAddress(engineAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _assetRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _paymentRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _paymentRouter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RegisterIssuerCall extends EthereumCall {
  get inputs(): RegisterIssuerCall__Inputs {
    return new RegisterIssuerCall__Inputs(this);
  }

  get outputs(): RegisterIssuerCall__Outputs {
    return new RegisterIssuerCall__Outputs(this);
  }
}

export class RegisterIssuerCall__Inputs {
  _call: RegisterIssuerCall;

  constructor(call: RegisterIssuerCall) {
    this._call = call;
  }

  get issuer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterIssuerCall__Outputs {
  _call: RegisterIssuerCall;

  constructor(call: RegisterIssuerCall) {
    this._call = call;
  }
}

export class ProgressCall extends EthereumCall {
  get inputs(): ProgressCall__Inputs {
    return new ProgressCall__Inputs(this);
  }

  get outputs(): ProgressCall__Outputs {
    return new ProgressCall__Outputs(this);
  }
}

export class ProgressCall__Inputs {
  _call: ProgressCall;

  constructor(call: ProgressCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ProgressCall__Outputs {
  _call: ProgressCall;

  constructor(call: ProgressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get ownership(): InitializeCallOwnershipStruct {
    return this._call.inputValues[1].value.toTuple() as InitializeCallOwnershipStruct;
  }

  get terms(): InitializeCallTermsStruct {
    return this._call.inputValues[2].value.toTuple() as InitializeCallTermsStruct;
  }

  get engineAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCallOwnershipStruct extends EthereumTuple {
  get recordCreatorObligor(): Address {
    return this[0].toAddress();
  }

  get recordCreatorBeneficiary(): Address {
    return this[1].toAddress();
  }

  get counterpartyObligor(): Address {
    return this[2].toAddress();
  }

  get counterpartyBeneficiary(): Address {
    return this[3].toAddress();
  }
}

export class InitializeCallTermsStruct extends EthereumTuple {
  get contractType(): i32 {
    return this[0].toI32();
  }

  get calendar(): i32 {
    return this[1].toI32();
  }

  get contractRole(): i32 {
    return this[2].toI32();
  }

  get creatorID(): Bytes {
    return this[3].toBytes();
  }

  get counterpartyID(): Bytes {
    return this[4].toBytes();
  }

  get dayCountConvention(): i32 {
    return this[5].toI32();
  }

  get businessDayConvention(): i32 {
    return this[6].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[7].toI32();
  }

  get currency(): Address {
    return this[8].toAddress();
  }

  get scalingEffect(): i32 {
    return this[9].toI32();
  }

  get penaltyType(): i32 {
    return this[10].toI32();
  }

  get feeBasis(): i32 {
    return this[11].toI32();
  }

  get contractDealDate(): BigInt {
    return this[12].toBigInt();
  }

  get statusDate(): BigInt {
    return this[13].toBigInt();
  }

  get initialExchangeDate(): BigInt {
    return this[14].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[15].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[16].toBigInt();
  }

  get purchaseDate(): BigInt {
    return this[17].toBigInt();
  }

  get capitalizationEndDate(): BigInt {
    return this[18].toBigInt();
  }

  get cycleAnchorDateOfInterestPayment(): BigInt {
    return this[19].toBigInt();
  }

  get cycleAnchorDateOfRateReset(): BigInt {
    return this[20].toBigInt();
  }

  get cycleAnchorDateOfScalingIndex(): BigInt {
    return this[21].toBigInt();
  }

  get cycleAnchorDateOfFee(): BigInt {
    return this[22].toBigInt();
  }

  get cycleAnchorDateOfPrincipalRedemption(): BigInt {
    return this[23].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[24].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[25].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[26].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[27].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[28].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[29].toBigInt();
  }

  get feeRate(): BigInt {
    return this[30].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[31].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[32].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[33].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[34].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[35].toBigInt();
  }

  get cycleOfInterestPayment(): InitializeCallTermsCycleOfInterestPaymentStruct {
    return this[36].toTuple() as InitializeCallTermsCycleOfInterestPaymentStruct;
  }

  get cycleOfRateReset(): InitializeCallTermsCycleOfRateResetStruct {
    return this[37].toTuple() as InitializeCallTermsCycleOfRateResetStruct;
  }

  get cycleOfScalingIndex(): InitializeCallTermsCycleOfScalingIndexStruct {
    return this[38].toTuple() as InitializeCallTermsCycleOfScalingIndexStruct;
  }

  get cycleOfFee(): InitializeCallTermsCycleOfFeeStruct {
    return this[39].toTuple() as InitializeCallTermsCycleOfFeeStruct;
  }

  get cycleOfPrincipalRedemption(): InitializeCallTermsCycleOfPrincipalRedemptionStruct {
    return this[40].toTuple() as InitializeCallTermsCycleOfPrincipalRedemptionStruct;
  }

  get lifeCap(): BigInt {
    return this[41].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[42].toBigInt();
  }

  get periodCap(): BigInt {
    return this[43].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[44].toBigInt();
  }
}

export class InitializeCallTermsCycleOfInterestPaymentStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class InitializeCallTermsCycleOfRateResetStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class InitializeCallTermsCycleOfScalingIndexStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class InitializeCallTermsCycleOfFeeStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class InitializeCallTermsCycleOfPrincipalRedemptionStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}
