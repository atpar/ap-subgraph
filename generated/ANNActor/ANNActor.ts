// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class InitializedAsset extends EthereumEvent {
  get params(): InitializedAsset__Params {
    return new InitializedAsset__Params(this);
  }
}

export class InitializedAsset__Params {
  _event: InitializedAsset;

  constructor(event: InitializedAsset) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get contractType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get counterparty(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProgressedAsset extends EthereumEvent {
  get params(): ProgressedAsset__Params {
    return new ProgressedAsset__Params(this);
  }
}

export class ProgressedAsset__Params {
  _event: ProgressedAsset;

  constructor(event: ProgressedAsset) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get eventType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get scheduleTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get payoff(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Status extends EthereumEvent {
  get params(): Status__Params {
    return new Status__Params(this);
  }
}

export class Status__Params {
  _event: Status;

  constructor(event: Status) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get statusMessage(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class ANNActor__decodeCollateralObjectResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ANNActor__decodeEventResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set(
      "value0",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ANNActor extends SmartContract {
  static bind(address: Address): ANNActor {
    return new ANNActor("ANNActor", address);
  }

  assetRegistry(): Address {
    let result = super.call("assetRegistry", []);

    return result[0].toAddress();
  }

  try_assetRegistry(): CallResult<Address> {
    let result = super.tryCall("assetRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  dataRegistry(): Address {
    let result = super.call("dataRegistry", []);

    return result[0].toAddress();
  }

  try_dataRegistry(): CallResult<Address> {
    let result = super.tryCall("dataRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  decodeCollateralObject(
    object: Bytes
  ): ANNActor__decodeCollateralObjectResult {
    let result = super.call("decodeCollateralObject", [
      EthereumValue.fromFixedBytes(object)
    ]);

    return new ANNActor__decodeCollateralObjectResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_decodeCollateralObject(
    object: Bytes
  ): CallResult<ANNActor__decodeCollateralObjectResult> {
    let result = super.tryCall("decodeCollateralObject", [
      EthereumValue.fromFixedBytes(object)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ANNActor__decodeCollateralObjectResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  decodeEvent(_event: Bytes): ANNActor__decodeEventResult {
    let result = super.call("decodeEvent", [
      EthereumValue.fromFixedBytes(_event)
    ]);

    return new ANNActor__decodeEventResult(
      result[0].toI32(),
      result[1].toBigInt()
    );
  }

  try_decodeEvent(_event: Bytes): CallResult<ANNActor__decodeEventResult> {
    let result = super.tryCall("decodeEvent", [
      EthereumValue.fromFixedBytes(_event)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ANNActor__decodeEventResult(value[0].toI32(), value[1].toBigInt())
    );
  }

  encodeCollateralAsObject(
    collateralToken: Address,
    collateralAmount: BigInt
  ): Bytes {
    let result = super.call("encodeCollateralAsObject", [
      EthereumValue.fromAddress(collateralToken),
      EthereumValue.fromUnsignedBigInt(collateralAmount)
    ]);

    return result[0].toBytes();
  }

  try_encodeCollateralAsObject(
    collateralToken: Address,
    collateralAmount: BigInt
  ): CallResult<Bytes> {
    let result = super.tryCall("encodeCollateralAsObject", [
      EthereumValue.fromAddress(collateralToken),
      EthereumValue.fromUnsignedBigInt(collateralAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  encodeEvent(eventType: i32, scheduleTime: BigInt): Bytes {
    let result = super.call("encodeEvent", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType)),
      EthereumValue.fromUnsignedBigInt(scheduleTime)
    ]);

    return result[0].toBytes();
  }

  try_encodeEvent(eventType: i32, scheduleTime: BigInt): CallResult<Bytes> {
    let result = super.tryCall("encodeEvent", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType)),
      EthereumValue.fromUnsignedBigInt(scheduleTime)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getEpochOffset(eventType: i32): BigInt {
    let result = super.call("getEpochOffset", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType))
    ]);

    return result[0].toBigInt();
  }

  try_getEpochOffset(eventType: i32): CallResult<BigInt> {
    let result = super.tryCall("getEpochOffset", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  shiftCalcTime(
    timestamp: BigInt,
    convention: i32,
    calendar: i32,
    maturityDate: BigInt
  ): BigInt {
    let result = super.call("shiftCalcTime", [
      EthereumValue.fromUnsignedBigInt(timestamp),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(convention)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(calendar)),
      EthereumValue.fromUnsignedBigInt(maturityDate)
    ]);

    return result[0].toBigInt();
  }

  try_shiftCalcTime(
    timestamp: BigInt,
    convention: i32,
    calendar: i32,
    maturityDate: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("shiftCalcTime", [
      EthereumValue.fromUnsignedBigInt(timestamp),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(convention)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(calendar)),
      EthereumValue.fromUnsignedBigInt(maturityDate)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  shiftEventTime(
    timestamp: BigInt,
    convention: i32,
    calendar: i32,
    maturityDate: BigInt
  ): BigInt {
    let result = super.call("shiftEventTime", [
      EthereumValue.fromUnsignedBigInt(timestamp),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(convention)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(calendar)),
      EthereumValue.fromUnsignedBigInt(maturityDate)
    ]);

    return result[0].toBigInt();
  }

  try_shiftEventTime(
    timestamp: BigInt,
    convention: i32,
    calendar: i32,
    maturityDate: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("shiftEventTime", [
      EthereumValue.fromUnsignedBigInt(timestamp),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(convention)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(calendar)),
      EthereumValue.fromUnsignedBigInt(maturityDate)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get assetRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dataRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ProgressCall extends EthereumCall {
  get inputs(): ProgressCall__Inputs {
    return new ProgressCall__Inputs(this);
  }

  get outputs(): ProgressCall__Outputs {
    return new ProgressCall__Outputs(this);
  }
}

export class ProgressCall__Inputs {
  _call: ProgressCall;

  constructor(call: ProgressCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ProgressCall__Outputs {
  _call: ProgressCall;

  constructor(call: ProgressCall) {
    this._call = call;
  }
}

export class ProgressWithCall extends EthereumCall {
  get inputs(): ProgressWithCall__Inputs {
    return new ProgressWithCall__Inputs(this);
  }

  get outputs(): ProgressWithCall__Outputs {
    return new ProgressWithCall__Outputs(this);
  }
}

export class ProgressWithCall__Inputs {
  _call: ProgressWithCall;

  constructor(call: ProgressWithCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _event(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ProgressWithCall__Outputs {
  _call: ProgressWithCall;

  constructor(call: ProgressWithCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get terms(): InitializeCallTermsStruct {
    return this._call.inputValues[0].value.toTuple() as InitializeCallTermsStruct;
  }

  get schedule(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get ownership(): InitializeCallOwnershipStruct {
    return this._call.inputValues[2].value.toTuple() as InitializeCallOwnershipStruct;
  }

  get engine(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get admin(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallTermsStruct extends EthereumTuple {
  get contractType(): i32 {
    return this[0].toI32();
  }

  get calendar(): i32 {
    return this[1].toI32();
  }

  get contractRole(): i32 {
    return this[2].toI32();
  }

  get dayCountConvention(): i32 {
    return this[3].toI32();
  }

  get businessDayConvention(): i32 {
    return this[4].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[5].toI32();
  }

  get scalingEffect(): i32 {
    return this[6].toI32();
  }

  get penaltyType(): i32 {
    return this[7].toI32();
  }

  get feeBasis(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get contractDealDate(): BigInt {
    return this[12].toBigInt();
  }

  get statusDate(): BigInt {
    return this[13].toBigInt();
  }

  get initialExchangeDate(): BigInt {
    return this[14].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[15].toBigInt();
  }

  get purchaseDate(): BigInt {
    return this[16].toBigInt();
  }

  get capitalizationEndDate(): BigInt {
    return this[17].toBigInt();
  }

  get cycleAnchorDateOfInterestPayment(): BigInt {
    return this[18].toBigInt();
  }

  get cycleAnchorDateOfRateReset(): BigInt {
    return this[19].toBigInt();
  }

  get cycleAnchorDateOfScalingIndex(): BigInt {
    return this[20].toBigInt();
  }

  get cycleAnchorDateOfFee(): BigInt {
    return this[21].toBigInt();
  }

  get cycleAnchorDateOfPrincipalRedemption(): BigInt {
    return this[22].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[23].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[24].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[25].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[26].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[27].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[28].toBigInt();
  }

  get feeRate(): BigInt {
    return this[29].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[30].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[31].toBigInt();
  }

  get delinquencyRate(): BigInt {
    return this[32].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[33].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[34].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[35].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[36].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[37].toBigInt();
  }

  get periodCap(): BigInt {
    return this[38].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[39].toBigInt();
  }

  get gracePeriod(): InitializeCallTermsGracePeriodStruct {
    return this[40].toTuple() as InitializeCallTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): InitializeCallTermsDelinquencyPeriodStruct {
    return this[41].toTuple() as InitializeCallTermsDelinquencyPeriodStruct;
  }

  get cycleOfInterestPayment(): InitializeCallTermsCycleOfInterestPaymentStruct {
    return this[42].toTuple() as InitializeCallTermsCycleOfInterestPaymentStruct;
  }

  get cycleOfRateReset(): InitializeCallTermsCycleOfRateResetStruct {
    return this[43].toTuple() as InitializeCallTermsCycleOfRateResetStruct;
  }

  get cycleOfScalingIndex(): InitializeCallTermsCycleOfScalingIndexStruct {
    return this[44].toTuple() as InitializeCallTermsCycleOfScalingIndexStruct;
  }

  get cycleOfFee(): InitializeCallTermsCycleOfFeeStruct {
    return this[45].toTuple() as InitializeCallTermsCycleOfFeeStruct;
  }

  get cycleOfPrincipalRedemption(): InitializeCallTermsCycleOfPrincipalRedemptionStruct {
    return this[46].toTuple() as InitializeCallTermsCycleOfPrincipalRedemptionStruct;
  }
}

export class InitializeCallTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class InitializeCallTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class InitializeCallTermsCycleOfInterestPaymentStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class InitializeCallTermsCycleOfRateResetStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class InitializeCallTermsCycleOfScalingIndexStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class InitializeCallTermsCycleOfFeeStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class InitializeCallTermsCycleOfPrincipalRedemptionStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get s(): i32 {
    return this[2].toI32();
  }

  get isSet(): boolean {
    return this[3].toBoolean();
  }
}

export class InitializeCallOwnershipStruct extends EthereumTuple {
  get creatorObligor(): Address {
    return this[0].toAddress();
  }

  get creatorBeneficiary(): Address {
    return this[1].toAddress();
  }

  get counterpartyObligor(): Address {
    return this[2].toAddress();
  }

  get counterpartyBeneficiary(): Address {
    return this[3].toAddress();
  }
}
