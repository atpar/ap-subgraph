// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class GrantedAccess extends EthereumEvent {
  get params(): GrantedAccess__Params {
    return new GrantedAccess__Params(this);
  }
}

export class GrantedAccess__Params {
  _event: GrantedAccess;

  constructor(event: GrantedAccess) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get methodSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class IncrementedScheduleIndex extends EthereumEvent {
  get params(): IncrementedScheduleIndex__Params {
    return new IncrementedScheduleIndex__Params(this);
  }
}

export class IncrementedScheduleIndex__Params {
  _event: IncrementedScheduleIndex;

  constructor(event: IncrementedScheduleIndex) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get nextScheduleIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RegisteredAsset extends EthereumEvent {
  get params(): RegisteredAsset__Params {
    return new RegisteredAsset__Params(this);
  }
}

export class RegisteredAsset__Params {
  _event: RegisteredAsset;

  constructor(event: RegisteredAsset) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RevokedAccess extends EthereumEvent {
  get params(): RevokedAccess__Params {
    return new RevokedAccess__Params(this);
  }
}

export class RevokedAccess__Params {
  _event: RevokedAccess;

  constructor(event: RevokedAccess) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get methodSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SetRootAccess extends EthereumEvent {
  get params(): SetRootAccess__Params {
    return new SetRootAccess__Params(this);
  }
}

export class SetRootAccess__Params {
  _event: SetRootAccess;

  constructor(event: SetRootAccess) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdatedActor extends EthereumEvent {
  get params(): UpdatedActor__Params {
    return new UpdatedActor__Params(this);
  }
}

export class UpdatedActor__Params {
  _event: UpdatedActor;

  constructor(event: UpdatedActor) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get prevActor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newActor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpdatedAnchorDate extends EthereumEvent {
  get params(): UpdatedAnchorDate__Params {
    return new UpdatedAnchorDate__Params(this);
  }
}

export class UpdatedAnchorDate__Params {
  _event: UpdatedAnchorDate;

  constructor(event: UpdatedAnchorDate) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get prevAnchorDate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get anchorDate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatedBeneficiary extends EthereumEvent {
  get params(): UpdatedBeneficiary__Params {
    return new UpdatedBeneficiary__Params(this);
  }
}

export class UpdatedBeneficiary__Params {
  _event: UpdatedBeneficiary;

  constructor(event: UpdatedBeneficiary) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get prevBeneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newBeneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpdatedCashflowBeneficiary extends EthereumEvent {
  get params(): UpdatedCashflowBeneficiary__Params {
    return new UpdatedCashflowBeneficiary__Params(this);
  }
}

export class UpdatedCashflowBeneficiary__Params {
  _event: UpdatedCashflowBeneficiary;

  constructor(event: UpdatedCashflowBeneficiary) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get cashflowId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get prevBeneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get newBeneficiary(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class UpdatedCustomTerms extends EthereumEvent {
  get params(): UpdatedCustomTerms__Params {
    return new UpdatedCustomTerms__Params(this);
  }
}

export class UpdatedCustomTerms__Params {
  _event: UpdatedCustomTerms;

  constructor(event: UpdatedCustomTerms) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class UpdatedEngine extends EthereumEvent {
  get params(): UpdatedEngine__Params {
    return new UpdatedEngine__Params(this);
  }
}

export class UpdatedEngine__Params {
  _event: UpdatedEngine;

  constructor(event: UpdatedEngine) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get prevEngine(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newEngine(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpdatedFinalizedState extends EthereumEvent {
  get params(): UpdatedFinalizedState__Params {
    return new UpdatedFinalizedState__Params(this);
  }
}

export class UpdatedFinalizedState__Params {
  _event: UpdatedFinalizedState;

  constructor(event: UpdatedFinalizedState) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get statusDate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatedObligor extends EthereumEvent {
  get params(): UpdatedObligor__Params {
    return new UpdatedObligor__Params(this);
  }
}

export class UpdatedObligor__Params {
  _event: UpdatedObligor;

  constructor(event: UpdatedObligor) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get prevObligor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newObligor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpdatedState extends EthereumEvent {
  get params(): UpdatedState__Params {
    return new UpdatedState__Params(this);
  }
}

export class UpdatedState__Params {
  _event: UpdatedState;

  constructor(event: UpdatedState) {
    this._event = event;
  }

  get assetId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get statusDate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AssetRegistry__computeEventTimeForEventInputTermsStruct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDate(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): AssetRegistry__computeEventTimeForEventInputTermsGracePeriodStruct {
    return this[31].toTuple() as AssetRegistry__computeEventTimeForEventInputTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): AssetRegistry__computeEventTimeForEventInputTermsDelinquencyPeriodStruct {
    return this[32].toTuple() as AssetRegistry__computeEventTimeForEventInputTermsDelinquencyPeriodStruct;
  }

  get contractReference_1(): AssetRegistry__computeEventTimeForEventInputTermsContractReference_1Struct {
    return this[33].toTuple() as AssetRegistry__computeEventTimeForEventInputTermsContractReference_1Struct;
  }

  get contractReference_2(): AssetRegistry__computeEventTimeForEventInputTermsContractReference_2Struct {
    return this[34].toTuple() as AssetRegistry__computeEventTimeForEventInputTermsContractReference_2Struct;
  }
}

export class AssetRegistry__computeEventTimeForEventInputTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class AssetRegistry__computeEventTimeForEventInputTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class AssetRegistry__computeEventTimeForEventInputTermsContractReference_1Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class AssetRegistry__computeEventTimeForEventInputTermsContractReference_2Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class AssetRegistry__decodeCollateralObjectResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class AssetRegistry__decodeEventResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set(
      "value0",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0Struct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDate(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0GracePeriodStruct {
    return this[31].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0GracePeriodStruct;
  }

  get delinquencyPeriod(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0DelinquencyPeriodStruct {
    return this[32].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0DelinquencyPeriodStruct;
  }

  get contractReference_1(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0ContractReference_1Struct {
    return this[33].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0ContractReference_1Struct;
  }

  get contractReference_2(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0ContractReference_2Struct {
    return this[34].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0ContractReference_2Struct;
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0GracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0DelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0ContractReference_1Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0ContractReference_2Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTemplateTermsStruct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDateOffset(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDateOffset(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTemplateTermsGracePeriodStruct {
    return this[31].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTemplateTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTemplateTermsDelinquencyPeriodStruct {
    return this[32].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTemplateTermsDelinquencyPeriodStruct;
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTemplateTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTemplateTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsStruct extends EthereumTuple {
  get anchorDate(): BigInt {
    return this[0].toBigInt();
  }

  get overwrittenAttributesMap(): BigInt {
    return this[1].toBigInt();
  }

  get overwrittenTerms(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsStruct {
    return this[2].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsStruct;
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsStruct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDate(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsGracePeriodStruct {
    return this[31].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsDelinquencyPeriodStruct {
    return this[32].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsDelinquencyPeriodStruct;
  }

  get contractReference_1(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsContractReference_1Struct {
    return this[33].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsContractReference_1Struct;
  }

  get contractReference_2(): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsContractReference_2Struct {
    return this[34].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsContractReference_2Struct;
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsContractReference_1Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsOverwrittenTermsContractReference_2Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class AssetRegistry__getFinalizedStateResultValue0Struct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get exerciseDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[6].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[7].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[8].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[9].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[11].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[12].toBigInt();
  }

  get exerciseAmount(): BigInt {
    return this[13].toBigInt();
  }
}

export class AssetRegistry__getOwnershipResultValue0Struct extends EthereumTuple {
  get creatorObligor(): Address {
    return this[0].toAddress();
  }

  get creatorBeneficiary(): Address {
    return this[1].toAddress();
  }

  get counterpartyObligor(): Address {
    return this[2].toAddress();
  }

  get counterpartyBeneficiary(): Address {
    return this[3].toAddress();
  }
}

export class AssetRegistry__getStateResultValue0Struct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get exerciseDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[6].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[7].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[8].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[9].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[11].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[12].toBigInt();
  }

  get exerciseAmount(): BigInt {
    return this[13].toBigInt();
  }
}

export class AssetRegistry__getTermsResultValue0Struct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDate(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): AssetRegistry__getTermsResultValue0GracePeriodStruct {
    return this[31].toTuple() as AssetRegistry__getTermsResultValue0GracePeriodStruct;
  }

  get delinquencyPeriod(): AssetRegistry__getTermsResultValue0DelinquencyPeriodStruct {
    return this[32].toTuple() as AssetRegistry__getTermsResultValue0DelinquencyPeriodStruct;
  }

  get contractReference_1(): AssetRegistry__getTermsResultValue0ContractReference_1Struct {
    return this[33].toTuple() as AssetRegistry__getTermsResultValue0ContractReference_1Struct;
  }

  get contractReference_2(): AssetRegistry__getTermsResultValue0ContractReference_2Struct {
    return this[34].toTuple() as AssetRegistry__getTermsResultValue0ContractReference_2Struct;
  }
}

export class AssetRegistry__getTermsResultValue0GracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class AssetRegistry__getTermsResultValue0DelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class AssetRegistry__getTermsResultValue0ContractReference_1Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class AssetRegistry__getTermsResultValue0ContractReference_2Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class AssetRegistry extends SmartContract {
  static bind(address: Address): AssetRegistry {
    return new AssetRegistry("AssetRegistry", address);
  }

  ONE_POINT_ZERO(): BigInt {
    let result = super.call("ONE_POINT_ZERO", []);

    return result[0].toBigInt();
  }

  try_ONE_POINT_ZERO(): CallResult<BigInt> {
    let result = super.tryCall("ONE_POINT_ZERO", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): CallResult<BigInt> {
    let result = super.tryCall("PRECISION", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  computeEventTimeForEvent(
    _event: Bytes,
    terms: AssetRegistry__computeEventTimeForEventInputTermsStruct
  ): BigInt {
    let result = super.call("computeEventTimeForEvent", [
      EthereumValue.fromFixedBytes(_event),
      EthereumValue.fromTuple(terms)
    ]);

    return result[0].toBigInt();
  }

  try_computeEventTimeForEvent(
    _event: Bytes,
    terms: AssetRegistry__computeEventTimeForEventInputTermsStruct
  ): CallResult<BigInt> {
    let result = super.tryCall("computeEventTimeForEvent", [
      EthereumValue.fromFixedBytes(_event),
      EthereumValue.fromTuple(terms)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  decodeCollateralObject(
    object: Bytes
  ): AssetRegistry__decodeCollateralObjectResult {
    let result = super.call("decodeCollateralObject", [
      EthereumValue.fromFixedBytes(object)
    ]);

    return new AssetRegistry__decodeCollateralObjectResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_decodeCollateralObject(
    object: Bytes
  ): CallResult<AssetRegistry__decodeCollateralObjectResult> {
    let result = super.tryCall("decodeCollateralObject", [
      EthereumValue.fromFixedBytes(object)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new AssetRegistry__decodeCollateralObjectResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  decodeEvent(_event: Bytes): AssetRegistry__decodeEventResult {
    let result = super.call("decodeEvent", [
      EthereumValue.fromFixedBytes(_event)
    ]);

    return new AssetRegistry__decodeEventResult(
      result[0].toI32(),
      result[1].toBigInt()
    );
  }

  try_decodeEvent(_event: Bytes): CallResult<AssetRegistry__decodeEventResult> {
    let result = super.tryCall("decodeEvent", [
      EthereumValue.fromFixedBytes(_event)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new AssetRegistry__decodeEventResult(
        value[0].toI32(),
        value[1].toBigInt()
      )
    );
  }

  deriveLifecycleTermsFromCustomTermsAndTemplateTerms(
    templateTerms: AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTemplateTermsStruct,
    terms: AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsStruct
  ): AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0Struct {
    let result = super.call(
      "deriveLifecycleTermsFromCustomTermsAndTemplateTerms",
      [EthereumValue.fromTuple(templateTerms), EthereumValue.fromTuple(terms)]
    );

    return result[0].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0Struct;
  }

  try_deriveLifecycleTermsFromCustomTermsAndTemplateTerms(
    templateTerms: AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTemplateTermsStruct,
    terms: AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsInputTermsStruct
  ): CallResult<
    AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0Struct
  > {
    let result = super.tryCall(
      "deriveLifecycleTermsFromCustomTermsAndTemplateTerms",
      [EthereumValue.fromTuple(templateTerms), EthereumValue.fromTuple(terms)]
    );
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as AssetRegistry__deriveLifecycleTermsFromCustomTermsAndTemplateTermsResultValue0Struct
    );
  }

  encodeCollateralAsObject(
    collateralToken: Address,
    collateralAmount: BigInt
  ): Bytes {
    let result = super.call("encodeCollateralAsObject", [
      EthereumValue.fromAddress(collateralToken),
      EthereumValue.fromUnsignedBigInt(collateralAmount)
    ]);

    return result[0].toBytes();
  }

  try_encodeCollateralAsObject(
    collateralToken: Address,
    collateralAmount: BigInt
  ): CallResult<Bytes> {
    let result = super.tryCall("encodeCollateralAsObject", [
      EthereumValue.fromAddress(collateralToken),
      EthereumValue.fromUnsignedBigInt(collateralAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  encodeEvent(eventType: i32, scheduleTime: BigInt): Bytes {
    let result = super.call("encodeEvent", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType)),
      EthereumValue.fromUnsignedBigInt(scheduleTime)
    ]);

    return result[0].toBytes();
  }

  try_encodeEvent(eventType: i32, scheduleTime: BigInt): CallResult<Bytes> {
    let result = super.tryCall("encodeEvent", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType)),
      EthereumValue.fromUnsignedBigInt(scheduleTime)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getActor(assetId: Bytes): Address {
    let result = super.call("getActor", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toAddress();
  }

  try_getActor(assetId: Bytes): CallResult<Address> {
    let result = super.tryCall("getActor", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getAnchorDate(assetId: Bytes): BigInt {
    let result = super.call("getAnchorDate", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBigInt();
  }

  try_getAnchorDate(assetId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getAnchorDate", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getCashflowBeneficiary(assetId: Bytes, cashflowId: i32): Address {
    let result = super.call("getCashflowBeneficiary", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromI32(cashflowId)
    ]);

    return result[0].toAddress();
  }

  try_getCashflowBeneficiary(
    assetId: Bytes,
    cashflowId: i32
  ): CallResult<Address> {
    let result = super.tryCall("getCashflowBeneficiary", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromI32(cashflowId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getEngine(assetId: Bytes): Address {
    let result = super.call("getEngine", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toAddress();
  }

  try_getEngine(assetId: Bytes): CallResult<Address> {
    let result = super.tryCall("getEngine", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getEpochOffset(eventType: i32): BigInt {
    let result = super.call("getEpochOffset", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType))
    ]);

    return result[0].toBigInt();
  }

  try_getEpochOffset(eventType: i32): CallResult<BigInt> {
    let result = super.tryCall("getEpochOffset", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(eventType))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getFinalizedState(
    assetId: Bytes
  ): AssetRegistry__getFinalizedStateResultValue0Struct {
    let result = super.call("getFinalizedState", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toTuple() as AssetRegistry__getFinalizedStateResultValue0Struct;
  }

  try_getFinalizedState(
    assetId: Bytes
  ): CallResult<AssetRegistry__getFinalizedStateResultValue0Struct> {
    let result = super.tryCall("getFinalizedState", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as AssetRegistry__getFinalizedStateResultValue0Struct
    );
  }

  getNextScheduleIndex(assetId: Bytes): BigInt {
    let result = super.call("getNextScheduleIndex", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBigInt();
  }

  try_getNextScheduleIndex(assetId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getNextScheduleIndex", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getNextScheduledEvent(assetId: Bytes): Bytes {
    let result = super.call("getNextScheduledEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_getNextScheduledEvent(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getNextScheduledEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getNextUnderlyingEvent(assetId: Bytes): Bytes {
    let result = super.call("getNextUnderlyingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_getNextUnderlyingEvent(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getNextUnderlyingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getOwnership(assetId: Bytes): AssetRegistry__getOwnershipResultValue0Struct {
    let result = super.call("getOwnership", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toTuple() as AssetRegistry__getOwnershipResultValue0Struct;
  }

  try_getOwnership(
    assetId: Bytes
  ): CallResult<AssetRegistry__getOwnershipResultValue0Struct> {
    let result = super.tryCall("getOwnership", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as AssetRegistry__getOwnershipResultValue0Struct
    );
  }

  getPendingEvent(assetId: Bytes): Bytes {
    let result = super.call("getPendingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_getPendingEvent(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getPendingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getState(assetId: Bytes): AssetRegistry__getStateResultValue0Struct {
    let result = super.call("getState", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toTuple() as AssetRegistry__getStateResultValue0Struct;
  }

  try_getState(
    assetId: Bytes
  ): CallResult<AssetRegistry__getStateResultValue0Struct> {
    let result = super.tryCall("getState", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as AssetRegistry__getStateResultValue0Struct
    );
  }

  getTemplateId(assetId: Bytes): Bytes {
    let result = super.call("getTemplateId", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_getTemplateId(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getTemplateId", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getTerms(assetId: Bytes): AssetRegistry__getTermsResultValue0Struct {
    let result = super.call("getTerms", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toTuple() as AssetRegistry__getTermsResultValue0Struct;
  }

  try_getTerms(
    assetId: Bytes
  ): CallResult<AssetRegistry__getTermsResultValue0Struct> {
    let result = super.tryCall("getTerms", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as AssetRegistry__getTermsResultValue0Struct
    );
  }

  hasAccess(assetId: Bytes, methodSignature: Bytes, account: Address): boolean {
    let result = super.call("hasAccess", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(methodSignature),
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasAccess(
    assetId: Bytes,
    methodSignature: Bytes,
    account: Address
  ): CallResult<boolean> {
    let result = super.tryCall("hasAccess", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromFixedBytes(methodSignature),
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  hasRootAccess(assetId: Bytes, account: Address): boolean {
    let result = super.call("hasRootAccess", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRootAccess(assetId: Bytes, account: Address): CallResult<boolean> {
    let result = super.tryCall("hasRootAccess", [
      EthereumValue.fromFixedBytes(assetId),
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  popNextScheduledEvent(assetId: Bytes): Bytes {
    let result = super.call("popNextScheduledEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_popNextScheduledEvent(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("popNextScheduledEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  popPendingEvent(assetId: Bytes): Bytes {
    let result = super.call("popPendingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBytes();
  }

  try_popPendingEvent(assetId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("popPendingEvent", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  templateRegistry(): Address {
    let result = super.call("templateRegistry", []);

    return result[0].toAddress();
  }

  try_templateRegistry(): CallResult<Address> {
    let result = super.tryCall("templateRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isRegistered(assetId: Bytes): boolean {
    let result = super.call("isRegistered", [
      EthereumValue.fromFixedBytes(assetId)
    ]);

    return result[0].toBoolean();
  }

  try_isRegistered(assetId: Bytes): CallResult<boolean> {
    let result = super.tryCall("isRegistered", [
      EthereumValue.fromFixedBytes(assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _templateRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GrantAccessCall extends EthereumCall {
  get inputs(): GrantAccessCall__Inputs {
    return new GrantAccessCall__Inputs(this);
  }

  get outputs(): GrantAccessCall__Outputs {
    return new GrantAccessCall__Outputs(this);
  }
}

export class GrantAccessCall__Inputs {
  _call: GrantAccessCall;

  constructor(call: GrantAccessCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get methodSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class GrantAccessCall__Outputs {
  _call: GrantAccessCall;

  constructor(call: GrantAccessCall) {
    this._call = call;
  }
}

export class HasAccessCall extends EthereumCall {
  get inputs(): HasAccessCall__Inputs {
    return new HasAccessCall__Inputs(this);
  }

  get outputs(): HasAccessCall__Outputs {
    return new HasAccessCall__Outputs(this);
  }
}

export class HasAccessCall__Inputs {
  _call: HasAccessCall;

  constructor(call: HasAccessCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get methodSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class HasAccessCall__Outputs {
  _call: HasAccessCall;

  constructor(call: HasAccessCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class HasRootAccessCall extends EthereumCall {
  get inputs(): HasRootAccessCall__Inputs {
    return new HasRootAccessCall__Inputs(this);
  }

  get outputs(): HasRootAccessCall__Outputs {
    return new HasRootAccessCall__Outputs(this);
  }
}

export class HasRootAccessCall__Inputs {
  _call: HasRootAccessCall;

  constructor(call: HasRootAccessCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class HasRootAccessCall__Outputs {
  _call: HasRootAccessCall;

  constructor(call: HasRootAccessCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PopNextScheduledEventCall extends EthereumCall {
  get inputs(): PopNextScheduledEventCall__Inputs {
    return new PopNextScheduledEventCall__Inputs(this);
  }

  get outputs(): PopNextScheduledEventCall__Outputs {
    return new PopNextScheduledEventCall__Outputs(this);
  }
}

export class PopNextScheduledEventCall__Inputs {
  _call: PopNextScheduledEventCall;

  constructor(call: PopNextScheduledEventCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PopNextScheduledEventCall__Outputs {
  _call: PopNextScheduledEventCall;

  constructor(call: PopNextScheduledEventCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PopPendingEventCall extends EthereumCall {
  get inputs(): PopPendingEventCall__Inputs {
    return new PopPendingEventCall__Inputs(this);
  }

  get outputs(): PopPendingEventCall__Outputs {
    return new PopPendingEventCall__Outputs(this);
  }
}

export class PopPendingEventCall__Inputs {
  _call: PopPendingEventCall;

  constructor(call: PopPendingEventCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PopPendingEventCall__Outputs {
  _call: PopPendingEventCall;

  constructor(call: PopPendingEventCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PushPendingEventCall extends EthereumCall {
  get inputs(): PushPendingEventCall__Inputs {
    return new PushPendingEventCall__Inputs(this);
  }

  get outputs(): PushPendingEventCall__Outputs {
    return new PushPendingEventCall__Outputs(this);
  }
}

export class PushPendingEventCall__Inputs {
  _call: PushPendingEventCall;

  constructor(call: PushPendingEventCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get pendingEvent(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PushPendingEventCall__Outputs {
  _call: PushPendingEventCall;

  constructor(call: PushPendingEventCall) {
    this._call = call;
  }
}

export class RevokeAccessCall extends EthereumCall {
  get inputs(): RevokeAccessCall__Inputs {
    return new RevokeAccessCall__Inputs(this);
  }

  get outputs(): RevokeAccessCall__Outputs {
    return new RevokeAccessCall__Outputs(this);
  }
}

export class RevokeAccessCall__Inputs {
  _call: RevokeAccessCall;

  constructor(call: RevokeAccessCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get methodSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RevokeAccessCall__Outputs {
  _call: RevokeAccessCall;

  constructor(call: RevokeAccessCall) {
    this._call = call;
  }
}

export class SetActorCall extends EthereumCall {
  get inputs(): SetActorCall__Inputs {
    return new SetActorCall__Inputs(this);
  }

  get outputs(): SetActorCall__Outputs {
    return new SetActorCall__Outputs(this);
  }
}

export class SetActorCall__Inputs {
  _call: SetActorCall;

  constructor(call: SetActorCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get actor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetActorCall__Outputs {
  _call: SetActorCall;

  constructor(call: SetActorCall) {
    this._call = call;
  }
}

export class SetAnchorDateCall extends EthereumCall {
  get inputs(): SetAnchorDateCall__Inputs {
    return new SetAnchorDateCall__Inputs(this);
  }

  get outputs(): SetAnchorDateCall__Outputs {
    return new SetAnchorDateCall__Outputs(this);
  }
}

export class SetAnchorDateCall__Inputs {
  _call: SetAnchorDateCall;

  constructor(call: SetAnchorDateCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get anchorDate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAnchorDateCall__Outputs {
  _call: SetAnchorDateCall;

  constructor(call: SetAnchorDateCall) {
    this._call = call;
  }
}

export class SetBeneficiaryForCashflowIdCall extends EthereumCall {
  get inputs(): SetBeneficiaryForCashflowIdCall__Inputs {
    return new SetBeneficiaryForCashflowIdCall__Inputs(this);
  }

  get outputs(): SetBeneficiaryForCashflowIdCall__Outputs {
    return new SetBeneficiaryForCashflowIdCall__Outputs(this);
  }
}

export class SetBeneficiaryForCashflowIdCall__Inputs {
  _call: SetBeneficiaryForCashflowIdCall;

  constructor(call: SetBeneficiaryForCashflowIdCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get cashflowId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetBeneficiaryForCashflowIdCall__Outputs {
  _call: SetBeneficiaryForCashflowIdCall;

  constructor(call: SetBeneficiaryForCashflowIdCall) {
    this._call = call;
  }
}

export class SetCounterpartyBeneficiaryCall extends EthereumCall {
  get inputs(): SetCounterpartyBeneficiaryCall__Inputs {
    return new SetCounterpartyBeneficiaryCall__Inputs(this);
  }

  get outputs(): SetCounterpartyBeneficiaryCall__Outputs {
    return new SetCounterpartyBeneficiaryCall__Outputs(this);
  }
}

export class SetCounterpartyBeneficiaryCall__Inputs {
  _call: SetCounterpartyBeneficiaryCall;

  constructor(call: SetCounterpartyBeneficiaryCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newCounterpartyBeneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCounterpartyBeneficiaryCall__Outputs {
  _call: SetCounterpartyBeneficiaryCall;

  constructor(call: SetCounterpartyBeneficiaryCall) {
    this._call = call;
  }
}

export class SetCounterpartyObligorCall extends EthereumCall {
  get inputs(): SetCounterpartyObligorCall__Inputs {
    return new SetCounterpartyObligorCall__Inputs(this);
  }

  get outputs(): SetCounterpartyObligorCall__Outputs {
    return new SetCounterpartyObligorCall__Outputs(this);
  }
}

export class SetCounterpartyObligorCall__Inputs {
  _call: SetCounterpartyObligorCall;

  constructor(call: SetCounterpartyObligorCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newCounterpartyObligor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCounterpartyObligorCall__Outputs {
  _call: SetCounterpartyObligorCall;

  constructor(call: SetCounterpartyObligorCall) {
    this._call = call;
  }
}

export class SetCreatorBeneficiaryCall extends EthereumCall {
  get inputs(): SetCreatorBeneficiaryCall__Inputs {
    return new SetCreatorBeneficiaryCall__Inputs(this);
  }

  get outputs(): SetCreatorBeneficiaryCall__Outputs {
    return new SetCreatorBeneficiaryCall__Outputs(this);
  }
}

export class SetCreatorBeneficiaryCall__Inputs {
  _call: SetCreatorBeneficiaryCall;

  constructor(call: SetCreatorBeneficiaryCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newCreatorBeneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCreatorBeneficiaryCall__Outputs {
  _call: SetCreatorBeneficiaryCall;

  constructor(call: SetCreatorBeneficiaryCall) {
    this._call = call;
  }
}

export class SetCreatorObligorCall extends EthereumCall {
  get inputs(): SetCreatorObligorCall__Inputs {
    return new SetCreatorObligorCall__Inputs(this);
  }

  get outputs(): SetCreatorObligorCall__Outputs {
    return new SetCreatorObligorCall__Outputs(this);
  }
}

export class SetCreatorObligorCall__Inputs {
  _call: SetCreatorObligorCall;

  constructor(call: SetCreatorObligorCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newCreatorObligor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCreatorObligorCall__Outputs {
  _call: SetCreatorObligorCall;

  constructor(call: SetCreatorObligorCall) {
    this._call = call;
  }
}

export class SetCustomTermsCall extends EthereumCall {
  get inputs(): SetCustomTermsCall__Inputs {
    return new SetCustomTermsCall__Inputs(this);
  }

  get outputs(): SetCustomTermsCall__Outputs {
    return new SetCustomTermsCall__Outputs(this);
  }
}

export class SetCustomTermsCall__Inputs {
  _call: SetCustomTermsCall;

  constructor(call: SetCustomTermsCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get terms(): SetCustomTermsCallTermsStruct {
    return this._call.inputValues[1].value.toTuple() as SetCustomTermsCallTermsStruct;
  }
}

export class SetCustomTermsCall__Outputs {
  _call: SetCustomTermsCall;

  constructor(call: SetCustomTermsCall) {
    this._call = call;
  }
}

export class SetCustomTermsCallTermsStruct extends EthereumTuple {
  get anchorDate(): BigInt {
    return this[0].toBigInt();
  }

  get overwrittenAttributesMap(): BigInt {
    return this[1].toBigInt();
  }

  get overwrittenTerms(): SetCustomTermsCallTermsOverwrittenTermsStruct {
    return this[2].toTuple() as SetCustomTermsCallTermsOverwrittenTermsStruct;
  }
}

export class SetCustomTermsCallTermsOverwrittenTermsStruct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDate(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): SetCustomTermsCallTermsOverwrittenTermsGracePeriodStruct {
    return this[31].toTuple() as SetCustomTermsCallTermsOverwrittenTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): SetCustomTermsCallTermsOverwrittenTermsDelinquencyPeriodStruct {
    return this[32].toTuple() as SetCustomTermsCallTermsOverwrittenTermsDelinquencyPeriodStruct;
  }

  get contractReference_1(): SetCustomTermsCallTermsOverwrittenTermsContractReference_1Struct {
    return this[33].toTuple() as SetCustomTermsCallTermsOverwrittenTermsContractReference_1Struct;
  }

  get contractReference_2(): SetCustomTermsCallTermsOverwrittenTermsContractReference_2Struct {
    return this[34].toTuple() as SetCustomTermsCallTermsOverwrittenTermsContractReference_2Struct;
  }
}

export class SetCustomTermsCallTermsOverwrittenTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class SetCustomTermsCallTermsOverwrittenTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class SetCustomTermsCallTermsOverwrittenTermsContractReference_1Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class SetCustomTermsCallTermsOverwrittenTermsContractReference_2Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class SetEngineCall extends EthereumCall {
  get inputs(): SetEngineCall__Inputs {
    return new SetEngineCall__Inputs(this);
  }

  get outputs(): SetEngineCall__Outputs {
    return new SetEngineCall__Outputs(this);
  }
}

export class SetEngineCall__Inputs {
  _call: SetEngineCall;

  constructor(call: SetEngineCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get engine(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetEngineCall__Outputs {
  _call: SetEngineCall;

  constructor(call: SetEngineCall) {
    this._call = call;
  }
}

export class SetFinalizedStateCall extends EthereumCall {
  get inputs(): SetFinalizedStateCall__Inputs {
    return new SetFinalizedStateCall__Inputs(this);
  }

  get outputs(): SetFinalizedStateCall__Outputs {
    return new SetFinalizedStateCall__Outputs(this);
  }
}

export class SetFinalizedStateCall__Inputs {
  _call: SetFinalizedStateCall;

  constructor(call: SetFinalizedStateCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get state(): SetFinalizedStateCallStateStruct {
    return this._call.inputValues[1].value.toTuple() as SetFinalizedStateCallStateStruct;
  }
}

export class SetFinalizedStateCall__Outputs {
  _call: SetFinalizedStateCall;

  constructor(call: SetFinalizedStateCall) {
    this._call = call;
  }
}

export class SetFinalizedStateCallStateStruct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get exerciseDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[6].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[7].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[8].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[9].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[11].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[12].toBigInt();
  }

  get exerciseAmount(): BigInt {
    return this[13].toBigInt();
  }
}

export class SetStateCall extends EthereumCall {
  get inputs(): SetStateCall__Inputs {
    return new SetStateCall__Inputs(this);
  }

  get outputs(): SetStateCall__Outputs {
    return new SetStateCall__Outputs(this);
  }
}

export class SetStateCall__Inputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get state(): SetStateCallStateStruct {
    return this._call.inputValues[1].value.toTuple() as SetStateCallStateStruct;
  }
}

export class SetStateCall__Outputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }
}

export class SetStateCallStateStruct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get exerciseDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[6].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[7].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[8].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[9].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[11].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[12].toBigInt();
  }

  get exerciseAmount(): BigInt {
    return this[13].toBigInt();
  }
}

export class RegisterAssetCall extends EthereumCall {
  get inputs(): RegisterAssetCall__Inputs {
    return new RegisterAssetCall__Inputs(this);
  }

  get outputs(): RegisterAssetCall__Outputs {
    return new RegisterAssetCall__Outputs(this);
  }
}

export class RegisterAssetCall__Inputs {
  _call: RegisterAssetCall;

  constructor(call: RegisterAssetCall) {
    this._call = call;
  }

  get assetId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get ownership(): RegisterAssetCallOwnershipStruct {
    return this._call.inputValues[1].value.toTuple() as RegisterAssetCallOwnershipStruct;
  }

  get templateId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get terms(): RegisterAssetCallTermsStruct {
    return this._call.inputValues[3].value.toTuple() as RegisterAssetCallTermsStruct;
  }

  get state(): RegisterAssetCallStateStruct {
    return this._call.inputValues[4].value.toTuple() as RegisterAssetCallStateStruct;
  }

  get engine(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get actor(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get root(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class RegisterAssetCall__Outputs {
  _call: RegisterAssetCall;

  constructor(call: RegisterAssetCall) {
    this._call = call;
  }
}

export class RegisterAssetCallOwnershipStruct extends EthereumTuple {
  get creatorObligor(): Address {
    return this[0].toAddress();
  }

  get creatorBeneficiary(): Address {
    return this[1].toAddress();
  }

  get counterpartyObligor(): Address {
    return this[2].toAddress();
  }

  get counterpartyBeneficiary(): Address {
    return this[3].toAddress();
  }
}

export class RegisterAssetCallTermsStruct extends EthereumTuple {
  get anchorDate(): BigInt {
    return this[0].toBigInt();
  }

  get overwrittenAttributesMap(): BigInt {
    return this[1].toBigInt();
  }

  get overwrittenTerms(): RegisterAssetCallTermsOverwrittenTermsStruct {
    return this[2].toTuple() as RegisterAssetCallTermsOverwrittenTermsStruct;
  }
}

export class RegisterAssetCallTermsOverwrittenTermsStruct extends EthereumTuple {
  get calendar(): i32 {
    return this[0].toI32();
  }

  get contractRole(): i32 {
    return this[1].toI32();
  }

  get dayCountConvention(): i32 {
    return this[2].toI32();
  }

  get businessDayConvention(): i32 {
    return this[3].toI32();
  }

  get endOfMonthConvention(): i32 {
    return this[4].toI32();
  }

  get scalingEffect(): i32 {
    return this[5].toI32();
  }

  get penaltyType(): i32 {
    return this[6].toI32();
  }

  get feeBasis(): i32 {
    return this[7].toI32();
  }

  get creditEventTypeCovered(): i32 {
    return this[8].toI32();
  }

  get currency(): Address {
    return this[9].toAddress();
  }

  get settlementCurrency(): Address {
    return this[10].toAddress();
  }

  get marketObjectCodeRateReset(): Bytes {
    return this[11].toBytes();
  }

  get statusDate(): BigInt {
    return this[12].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[13].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[14].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[15].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[16].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[17].toBigInt();
  }

  get rateMultiplier(): BigInt {
    return this[18].toBigInt();
  }

  get rateSpread(): BigInt {
    return this[19].toBigInt();
  }

  get feeRate(): BigInt {
    return this[20].toBigInt();
  }

  get nextResetRate(): BigInt {
    return this[21].toBigInt();
  }

  get penaltyRate(): BigInt {
    return this[22].toBigInt();
  }

  get premiumDiscountAtIED(): BigInt {
    return this[23].toBigInt();
  }

  get priceAtPurchaseDate(): BigInt {
    return this[24].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[25].toBigInt();
  }

  get coverageOfCreditEnhancement(): BigInt {
    return this[26].toBigInt();
  }

  get lifeCap(): BigInt {
    return this[27].toBigInt();
  }

  get lifeFloor(): BigInt {
    return this[28].toBigInt();
  }

  get periodCap(): BigInt {
    return this[29].toBigInt();
  }

  get periodFloor(): BigInt {
    return this[30].toBigInt();
  }

  get gracePeriod(): RegisterAssetCallTermsOverwrittenTermsGracePeriodStruct {
    return this[31].toTuple() as RegisterAssetCallTermsOverwrittenTermsGracePeriodStruct;
  }

  get delinquencyPeriod(): RegisterAssetCallTermsOverwrittenTermsDelinquencyPeriodStruct {
    return this[32].toTuple() as RegisterAssetCallTermsOverwrittenTermsDelinquencyPeriodStruct;
  }

  get contractReference_1(): RegisterAssetCallTermsOverwrittenTermsContractReference_1Struct {
    return this[33].toTuple() as RegisterAssetCallTermsOverwrittenTermsContractReference_1Struct;
  }

  get contractReference_2(): RegisterAssetCallTermsOverwrittenTermsContractReference_2Struct {
    return this[34].toTuple() as RegisterAssetCallTermsOverwrittenTermsContractReference_2Struct;
  }
}

export class RegisterAssetCallTermsOverwrittenTermsGracePeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class RegisterAssetCallTermsOverwrittenTermsDelinquencyPeriodStruct extends EthereumTuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get p(): i32 {
    return this[1].toI32();
  }

  get isSet(): boolean {
    return this[2].toBoolean();
  }
}

export class RegisterAssetCallTermsOverwrittenTermsContractReference_1Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class RegisterAssetCallTermsOverwrittenTermsContractReference_2Struct extends EthereumTuple {
  get object(): Bytes {
    return this[0].toBytes();
  }

  get _type(): i32 {
    return this[1].toI32();
  }

  get role(): i32 {
    return this[2].toI32();
  }
}

export class RegisterAssetCallStateStruct extends EthereumTuple {
  get contractPerformance(): i32 {
    return this[0].toI32();
  }

  get statusDate(): BigInt {
    return this[1].toBigInt();
  }

  get nonPerformingDate(): BigInt {
    return this[2].toBigInt();
  }

  get maturityDate(): BigInt {
    return this[3].toBigInt();
  }

  get exerciseDate(): BigInt {
    return this[4].toBigInt();
  }

  get terminationDate(): BigInt {
    return this[5].toBigInt();
  }

  get notionalPrincipal(): BigInt {
    return this[6].toBigInt();
  }

  get accruedInterest(): BigInt {
    return this[7].toBigInt();
  }

  get feeAccrued(): BigInt {
    return this[8].toBigInt();
  }

  get nominalInterestRate(): BigInt {
    return this[9].toBigInt();
  }

  get interestScalingMultiplier(): BigInt {
    return this[10].toBigInt();
  }

  get notionalScalingMultiplier(): BigInt {
    return this[11].toBigInt();
  }

  get nextPrincipalRedemptionPayment(): BigInt {
    return this[12].toBigInt();
  }

  get exerciseAmount(): BigInt {
    return this[13].toBigInt();
  }
}
