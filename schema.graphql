
type DvPSettlementData @entity {
  id: ID!
  settlementId: BigInt!
  creator: Bytes!
  creatorToken: Bytes!
  creatorAmount: BigInt!
  creatorBeneficiary: Bytes!
  counterparty: Bytes!
  counterpartyToken: Bytes!
  counterpartyAmount: BigInt!
  expirationDate: BigInt!
  status: Int!
}

type DataPoint @entity {
  id: ID!
  dataPoint: BigInt!
  timestamp: BigInt!
  provider: Bytes!
  dataSet: DataSet! @derivedFrom(field: "dataPoints")
}

type DataSet @entity {
  id: ID!
  provider: Bytes!
  dataPoints: [DataPoint!]
  lastUpdated: BigInt
}

type Period @entity {
  id: ID!
  i: BigInt!
  p: Int!
  isSet: Boolean!
}

type Cycle @entity {
  id: ID!
  i: BigInt!
  p: Int!
  s: Int!
  isSet: Boolean!
}

type ContractReference @entity {
  id: ID!
  object: Bytes!
  object2: Bytes!
  _type: Int!
  role: Int!
}

type AssetOwnership @entity {
  id: ID!
  creatorObligor: Bytes!
  creatorBeneficiary: Bytes!
  counterpartyObligor: Bytes!
  counterpartyBeneficiary: Bytes!  
  asset: Asset! @derivedFrom(field: "ownership")
}

type Schedule @entity {
  id: ID!
  events: [Bytes!]!
  nextScheduleIndex: BigInt!
  pendingEvent: Bytes!
  nextScheduledEvent: Bytes!
  nextUnderlyingEvent: Bytes!
  asset: Asset! @derivedFrom(field: "schedule")
}

type Admins @entity {
  id: ID!
  accounts: [Bytes!]!
  asset: Asset! @derivedFrom(field: "admins")
}

type ANNTerms @entity {
  id: ID!
  contractType: Int!
  calendar: Int!
  contractRole: Int!
  dayCountConvention: Int!
  businessDayConvention: Int!
  endOfMonthConvention: Int!
  scalingEffect: Int!
  # penaltyType: Int! not implemented
  feeBasis: Int!
  # contractPerformance: Int! state only
  # seniority: Int! not implemented
  # prepaymentEffect: Int! not implemented
  # interestCalculationBase: Int! not implemented

  currency: Bytes!
  settlementCurrency: Bytes!

  # bytes32 marketObjectCode: Bytes! not implemented
  marketObjectCodeRateReset: Bytes!
  # marketObjectCodeOfScalingIndex: Bytes! not implemented

  issueDate: BigInt!
  statusDate: BigInt!
  initialExchangeDate: BigInt!
  maturityDate: BigInt!
  # terminationDate: BigInt! state only
  purchaseDate: BigInt!
  capitalizationEndDate: BigInt!
  # ammortizationDate: BigInt! not implemented
  # optionExerciseEndDate: BigInt! not implemented
  # nonPerformingDate: BigInt! state only
  cycleAnchorDateOfInterestPayment: BigInt!
  # cycleAnchorDateOfInterestCalculationBase: BigInt! not implemented
  cycleAnchorDateOfRateReset: BigInt!
  cycleAnchorDateOfScalingIndex: BigInt!
  cycleAnchorDateOfFee: BigInt!
  cycleAnchorDateOfPrincipalRedemption: BigInt!
  # cycleAnchorDateOfOptionality: BigInt! not implemented

  notionalPrincipal: BigInt!
  nominalInterestRate: BigInt!
  accruedInterest: BigInt!
  rateMultiplier: BigInt!
  rateSpread: BigInt!
  nextResetRate: BigInt!
  feeRate: BigInt!
  feeAccrued: BigInt!
  # penaltyRate: BigInt! not implemented
  # delinquencyRate: BigInt! not implemented
  premiumDiscountAtIED: BigInt!
  priceAtPurchaseDate: BigInt!
  priceAtTerminationDate: BigInt!
  # creditLineAmount: BigInt! not implemented
  # scalingIndexAtStatusDate: BigInt! not implemented
  # marketValueObserved: BigInt! not implemented
  nextPrincipalRedemptionPayment: BigInt!
  # coverageOfCreditEnhancement: BigInt!
  # interestCalculationBaseAmount: BigInt! not implemented
  lifeCap: BigInt!
  lifeFloor: BigInt!
  periodCap: BigInt!
  periodFloor: BigInt!

  gracePeriod: Period!
  delinquencyPeriod: Period!
  # prepaymentPeriod: Period! not implemented
  # fixingPeriod: Period! not implemented

  cycleOfInterestPayment: Cycle!
  cycleOfRateReset: Cycle!
  cycleOfScalingIndex: Cycle!
  cycleOfFee: Cycle!
  cycleOfPrincipalRedemption: Cycle!
  # cycleOfOptionality: Cycle! not implemented
  # cycleOfInterestCalculationBase: Cycle! not implemented

  asset: ANNAsset! @derivedFrom(field: "terms")
}

type ANNState @entity {
  id: ID!
  contractPerformance: Int!

  statusDate: BigInt!
  nonPerformingDate: BigInt!
  maturityDate: BigInt!
  terminationDate: BigInt!

  notionalPrincipal: BigInt!
  # notionalPrincipal2: BigInt! not implemented
  accruedInterest: BigInt!
  # accruedInterest2: BigInt! not implemented
  feeAccrued: BigInt!
  nominalInterestRate: BigInt!
  # nominalInterestRate2: BigInt! not implemented
  # interestCalculationBaseAmount: BigInt! not implemented
  interestScalingMultiplier: BigInt!
  notionalScalingMultiplier: BigInt!
  nextPrincipalRedemptionPayment: BigInt!

  asset: ANNAsset! @derivedFrom(field: "state")
}

type CECTerms @entity {
  id: ID!
  contractType: Int!
  calendar: Int!
  contractRole: Int!
  dayCountConvention: Int!
  businessDayConvention: Int!
  endOfMonthConvention: Int!
  creditEventTypeCovered: Int!
  feeBasis: Int!

  statusDate: BigInt!
  maturityDate: BigInt!
  # exerciseDate: BigInt! state only

  notionalPrincipal: BigInt!
  feeRate: BigInt!
  # exerciseAmount: BigInt! state only
  coverageOfCreditEnhancement: BigInt!

  # settlementPeriod: Period! not implemented

  contractReference_1: ContractReference!
  contractReference_2: ContractReference!

  asset: CECAsset! @derivedFrom(field: "terms")
}

type CECState @entity {
  id: ID!
  contractPerformance: Int!

  statusDate: BigInt!
  maturityDate: BigInt!
  exerciseDate: BigInt!
  terminationDate: BigInt!

  feeAccrued: BigInt!
  exerciseAmount: BigInt!

  asset: CECAsset! @derivedFrom(field: "state")
}

type CEGTerms @entity {
  id: ID!
  contractType: Int!
  calendar: Int!
  contractRole: Int!
  dayCountConvention: Int!
  businessDayConvention: Int!
  endOfMonthConvention: Int!
  feeBasis: Int!
  # contractPerformance: Int! state only
  creditEventTypeCovered: Int!
  # guaranteedExposure: Int! state only

  currency: Bytes!
  settlementCurrency: Bytes!

  # contractDealDate: BigInt! not implemented
  statusDate: BigInt!
  maturityDate: BigInt!
  purchaseDate: BigInt!
  cycleAnchorDateOfFee: BigInt!
  # exerciseDate: BigInt! state only
  # nonPerformingDate: BigInt! state only

  notionalPrincipal: BigInt!
  delinquencyRate: BigInt!
  feeAccrued: BigInt!
  feeRate: BigInt!
  priceAtPurchaseDate: BigInt!
  priceAtTerminationDate: BigInt!
  coverageOfCreditEnhancement: BigInt!
  # exerciseAmount: BigInt! state only
  
  gracePeriod: Period!
  delinquencyPeriod: Period!
  # settlementPeriod: Period! not implemented

  cycleOfFee: Cycle!

  contractReference_1: ContractReference!
  contractReference_2: ContractReference!

  asset: CEGAsset! @derivedFrom(field: "terms")
}

type CEGState @entity {
  id: ID!
  contractPerformance: Int!

  statusDate: BigInt!
  nonPerformingDate: BigInt!
  maturityDate: BigInt!
  exerciseDate: BigInt!
  terminationDate: BigInt!

  notionalPrincipal: BigInt!
  feeAccrued: BigInt!
  exerciseAmount: BigInt!

  asset: CEGAsset! @derivedFrom(field: "state")
}

type CERTFTerms @entity {
  id: ID!
  contractType: Int!
  calendar: Int!
  contractRole: Int!
  dayCountConvention: Int!
  businessDayConvention: Int!
  endOfMonthConvention: Int!
  couponType: Int!
  # contractPerformance: Int! state only

  currency: Bytes!
  settlementCurrency: Bytes!

  # marketObjectCode: Bytes! not implemented

  # contractDealDate: BigInt! not implemented
  statusDate: BigInt!
  initialExchangeDate: BigInt!
  maturityDate: BigInt!
  # nonPerformingDate: BigInt!state only
  issueDate: BigInt!
  # lastCouponDay: BigInt! state only
  cycleAnchorDateOfRedemption: BigInt!
  cycleAnchorDateOfTermination: BigInt!
  cycleAnchorDateOfCoupon: BigInt!

  nominalPrice: BigInt!
  issuePrice: BigInt!
  # delinquencyRate: BigInt not implemented
  quantity: BigInt!
  # exerciseQuantity: BigInt! state only
  # exerciseQuantityOrdered: BigInt! state only
  # marginFactor: BigInt!  state only
  # adjustmentFactor: BigInt! state only
  denominationRatio: BigInt!
  couponRate: BigInt!
  # exerciseAmount: BigInt! state only
  # couponAmountFixed: BigInt! state only

  gracePeriod: Period!
  delinquencyPeriod: Period!
  settlementPeriod: Period!
  fixingPeriod: Period!
  redemptionRecordPeriod: Period!

  cycleOfRedemption: Cycle!
  cycleOfTermination: Cycle!
  cycleOfCoupon: Cycle!

  contractReference_1: ContractReference!
  contractReference_2: ContractReference!

  asset: CERTFAsset! @derivedFrom(field: "terms")
}

type CERTFState @entity {
  id: ID!
  contractPerformance: Int!

  statusDate: BigInt!
  nonPerformingDate: BigInt!
  maturityDate: BigInt!
  exerciseDate: BigInt!
  terminationDate: BigInt!
  lastCouponFixingDate: BigInt!
  exerciseAmount: BigInt!
  exerciseQuantity: BigInt!  
  quantity: BigInt!
  couponAmountFixed: BigInt!
  # exerciseQuantityOrdered: BigInt! not implemented
  marginFactor: BigInt!
  adjustmentFactor: BigInt!

  asset: CERTFAsset! @derivedFrom(field: "state")
}

type PAMTerms @entity {
  id: ID!
  contractType: Int!
  calendar: Int!
  contractRole: Int!
  dayCountConvention: Int!
  businessDayConvention: Int!
  endOfMonthConvention: Int!
  scalingEffect: Int!
  # penaltyType: Int! not implemented
  feeBasis: Int!
  # contractPerformance: Int! state only
  # seniority: Int! not implemented
  # prepaymentEffect: Int! not implemented
  # cyclePointOfInterestPayment not implemented
  # cyclePointOfRateReset not implemented

  currency: Bytes!
  settlementCurrency: Bytes!

  # bytes32 marketObjectCode: Bytes! not implemented
  marketObjectCodeRateReset: Bytes!
  # marketObjectCodeOfScalingIndex: Bytes! not implemented

  # contractDealDate: BigInt! not implemented
  issueDate: BigInt!
  statusDate: BigInt!
  initialExchangeDate: BigInt!
  maturityDate: BigInt!
  # terminationDate: BigInt! state only
  purchaseDate: BigInt!
  capitalizationEndDate: BigInt!
  # optionExerciseEndDate: BigInt! not implemented
  # nonPerformingDate: BigInt! state only
  cycleAnchorDateOfInterestPayment: BigInt!
  cycleAnchorDateOfRateReset: BigInt!
  cycleAnchorDateOfScalingIndex: BigInt!
  cycleAnchorDateOfFee: BigInt!
  # cycleAnchorDateOfOptionality: BigInt! not implemented

  notionalPrincipal: BigInt!
  nominalInterestRate: BigInt!
  accruedInterest: BigInt!
  rateMultiplier: BigInt!
  rateSpread: BigInt!
  nextResetRate: BigInt!
  feeRate: BigInt!
  feeAccrued: BigInt!
  # penaltyRate: BigInt! not implemented
  # delinquencyRate: BigInt! not implemented
  premiumDiscountAtIED: BigInt!
  priceAtPurchaseDate: BigInt!
  priceAtTerminationDate: BigInt!
  # creditLineAmount: BigInt! not implemented
  # scalingIndexAtStatusDate: BigInt! not implemented
  # marketValueObserved: BigInt! not implemented
  lifeCap: BigInt!
  lifeFloor: BigInt!
  periodCap: BigInt!
  periodFloor: BigInt!

  gracePeriod: Period!
  delinquencyPeriod: Period!
  # prepaymentPeriod: Period! not implemented
  # fixingPeriod: Period! not implemented

  cycleOfInterestPayment: Cycle!
  cycleOfRateReset: Cycle!
  cycleOfScalingIndex: Cycle!
  cycleOfFee: Cycle!
  # cycleOfOptionality: Cycle! not implemented

  asset: PAMAsset! @derivedFrom(field: "terms")
}

type PAMState @entity {
  id: ID!
  contractPerformance: Int!

  statusDate: BigInt!
  nonPerformingDate: BigInt!
  maturityDate: BigInt!
  terminationDate: BigInt!

  notionalPrincipal: BigInt!
  # notionalPrincipal2: BigInt! not implemented
  accruedInterest: BigInt!
  # accruedInterest2: BigInt! not implemented
  feeAccrued: BigInt!
  nominalInterestRate: BigInt!
  # nominalInterestRate2: BigInt! not implemented
  # interestCalculationBaseAmount: BigInt! not implemented
  interestScalingMultiplier: BigInt!
  notionalScalingMultiplier: BigInt!

  asset: PAMAsset! @derivedFrom(field: "state")
}

type STKTerms @entity {
  id: ID!
  contractType: Int!
  calendar: Int!
  contractRole: Int!
  dayCountConvention: Int!
  businessDayConvention: Int!
  endOfMonthConvention: Int!
  redeemableByIssuer: Int!
  # seniority: Int! not implemented

  currency: Bytes!
  settlementCurrency: Bytes!

  # marketObjectCode: Bytes! not implemented

  statusDate: BigInt!
  issueDate: BigInt!
  purchaseDate: BigInt!
  cycleAnchorDateOfDividend: BigInt!

  nominalPrice: BigInt!
  notionalPrincipal: BigInt!
  issuePrice: BigInt!
  quantity: BigInt!
  priceAtPurchaseDate: BigInt!
  redemptionPrice: BigInt!
  priceAtTerminationDate: BigInt!

  dividendRecordPeriod: Period!
  dividendPaymentPeriod: Period!
  splitSettlementPeriod: Period!
  redemptionRecordPeriod: Period!
  redemptionPaymentPeriod: Period!

  cycleOfDividend: Cycle!

  asset: STKAsset! @derivedFrom(field: "terms")
}

type STKState @entity {
  id: ID!
  contractPerformance: Int!

  statusDate: BigInt!
  nonPerformingDate: BigInt!
  maturityDate: BigInt!
  exerciseDate: BigInt!
  terminationDate: BigInt!
  lastDividendFixingDate: BigInt!

  notionalPrincipal: BigInt!
  exerciseAmount: BigInt!
  exerciseQuantity: BigInt!
  quantity: BigInt!
  couponAmountFixed: BigInt!
  # exerciseQuantityOrdered: BigInt! not implemented
  marginFactor: BigInt!
  adjustmentFactor: BigInt!
  dividendPaymentAmount: BigInt!
  splitRatio: BigInt!

  asset: STKAsset! @derivedFrom(field: "state")
}

type COLLATerms @entity {
  id: ID!
  contractType: Int!
  calendar: Int!
  contractRole: Int!
  dayCountConvention: Int!
  businessDayConvention: Int!
  endOfMonthConvention: Int!
  # contractPerformance: Int! state only

  marketObjectCodeOfCollateral: Bytes!

  currency: Bytes!
  settlementCurrency: Bytes!
  collateralCurrency: Bytes!

  statusDate: BigInt!
  initialExchangeDate: BigInt!
  maturityDate: BigInt!
  # nonPerformingDate: BigInt! state only
  cycleAnchorDateOfInterestPayment: BigInt!

  notionalPrincipal: BigInt!
  nominalInterestRate: BigInt!
  accruedInterest: BigInt!
  premiumDiscountAtIED: BigInt!
  coverageOfCollateral: BigInt!

  gracePeriod: Period!
  delinquencyPeriod: Period!

  cycleOfInterestPayment: Cycle!

  asset: COLLAAsset! @derivedFrom(field: "terms")
}

type COLLAState @entity {
  id: ID!
  contractPerformance: Int!

  statusDate: BigInt!
  nonPerformingDate: BigInt!
  maturityDate: BigInt!
  terminationDate: BigInt!

  notionalPrincipal: BigInt!
  accruedInterest: BigInt!
  nominalInterestRate: BigInt!
  interestScalingMultiplier: BigInt!
  notionalScalingMultiplier: BigInt!

  asset: COLLAAsset! @derivedFrom(field: "state")
}

type ANNAsset implements Asset @entity {
  id: ID!
  assetId: Bytes!
  terms: ANNTerms!
  state: ANNState!
  schedule: Schedule!
  ownership: AssetOwnership!
  engine: Bytes!
  actor: Bytes!
  registry: Bytes!
  admins: Admins!
  extension: Bytes!
  createdOn: BigInt!
}

type CECAsset implements Asset @entity {
  id: ID!
  assetId: Bytes!
  terms: CECTerms!
  state: CECState!
  schedule: Schedule!
  ownership: AssetOwnership!
  engine: Bytes!
  actor: Bytes!
  registry: Bytes!
  admins: Admins!
  extension: Bytes!
  createdOn: BigInt!
}

type CEGAsset implements Asset @entity {
  id: ID!
  assetId: Bytes!
  terms: CEGTerms!
  state: CEGState!
  schedule: Schedule!
  ownership: AssetOwnership!
  engine: Bytes!
  actor: Bytes!
  registry: Bytes!
  admins: Admins!
  extension: Bytes!
  createdOn: BigInt!
}

type CERTFAsset implements Asset @entity {
  id: ID!
  assetId: Bytes!
  terms: CERTFTerms!
  state: CERTFState!
  schedule: Schedule!
  ownership: AssetOwnership!
  engine: Bytes!
  actor: Bytes!
  registry: Bytes!
  admins: Admins!
  extension: Bytes!
  createdOn: BigInt!
}

type PAMAsset implements Asset @entity {
  id: ID!
  assetId: Bytes!
  terms: PAMTerms!
  state: PAMState!
  schedule: Schedule!
  ownership: AssetOwnership!
  engine: Bytes!
  actor: Bytes!
  registry: Bytes!
  admins: Admins!
  extension: Bytes!
  createdOn: BigInt!
}

type STKAsset implements Asset @entity {
  id: ID!
  assetId: Bytes!
  terms: STKTerms!
  state: STKState!
  schedule: Schedule!
  ownership: AssetOwnership!
  engine: Bytes!
  actor: Bytes!
  registry: Bytes!
  admins: Admins!
  extension: Bytes!
  createdOn: BigInt!
}

type COLLAAsset implements Asset @entity {
  id: ID!
  assetId: Bytes!
  terms: COLLATerms!
  state: COLLAState!
  schedule: Schedule!
  ownership: AssetOwnership!
  engine: Bytes!
  actor: Bytes!
  registry: Bytes!
  admins: Admins!
  extension: Bytes!
  createdOn: BigInt!
}

interface Asset @entity {
  id: ID!
  assetId: Bytes!
  schedule: Schedule!
  ownership: AssetOwnership!
  engine: Bytes!
  actor: Bytes!
  registry: Bytes!
  admins: Admins!
  extension: Bytes!
  createdOn: BigInt!
}
